[
{
  "model": "blog.post",
  "pk": 1,
  "fields": {
    "title": "How to set up Django Environment in Linux for beginners",
    "slug": "how-set-django-environment-linux-beginners",
    "author": 1,
    "image": "blog/2019/04/13/pebbles.jpg",
    "caption": "four beautiful white pebbles with courage, dream, inspire and harmony written on them",
    "credit": "https://www.pexels.com/photo/balance-business-cobblestone-conceptual-279470/",
    "body": "When  I started learning Django, finding a tutorial that had everything I needed was pretty hard. Hopefully, this tutorial will help you get started!\r\nDjango, commonly referred to as 'a  web framework for perfectionists with deadlines', was released in 2015 as open source and has attracted a large community around it over the years.According to <a href=\"https://www.djangoproject.com/\" target=\"_blank\">DjangoProject</a>, it is a python web framework for developers looking for a faster way to build web applications and with less code.Django adopts Model-Template-View (MTV) pattern.\r\n####  Why Consider Django?\r\nIf you ask most programmers why they choose to code in a certain language and not the other, the reasons are varied. Every programming language has an advantage or two over the other. Some like python is easy to master than others or depending on what you intend to achieve. It's more practical to learn java for android developers as python for data scientists.I will give a personal opinion on why I recommend <a href=\"https://www.djangoproject.com/\" target=\"_blank\">Django</a> for any beginner in web development.  \r\n\r\n**Secure**\r\n\r\nDjango  has taken into account security measures and offer developers features to prevent common  attacks such as:\r\n\r\n+   Cross-Site Request Forgery (CSRF) protection. CSRF or Sea Surf is a malicious attack on unsuspecting website users to execute illegitimate action taking advantage of the users authenticated status without their knowledge. The attackers take advantage of web servers without enough information about the request hence lack the ability to distinguish between a legitimate request from a forged one. Django offers an additional field with tokens put by the server on all POST requests so that the server only execute request if the tokens match\r\n+ Cross Site Scripting(XSS)\r\n+ SQL injection\r\n+ clickjacking, etc\r\n \r\n**Great Documentation**\r\n\r\nDjango has  <a href=\"https://www.djangoproject.com/\" target=\"_blank\">Detailed Documentation</a>.It has been around since 2015 when it was released as open source and has attracted a community of developers around it. When you get stuck, there is a good chance someone else was too, so finding a solution is as easy as searching on the web and forums such as StackOverflow.\r\n\r\n**Speed**\r\n\r\nDjango comes handy whenever speed is a factor. With so many built-in functionalities that could take more time to develop.\r\n\r\n+ Built-in Admin interface\r\n+ Authentication  System\r\n+ Templates and layouts\r\n+  Object-Relational mapper (ORM)\r\n+ etc\r\n\r\n#### Prerequisites\r\nMake sure you have the following installed on your computer to follow-through.\r\n\r\n+ You got Linux Os installed (Ubuntu, Debian)\r\n+ Python 3+\r\n+ Django 2.0\r\n+ Virtualenv\r\n+ pip\r\n\r\n>We will use `pip` and `virtualenv` in this article ,  If you want to use `pipenv `,please refer to  <a href=\"https://achiengcindy.com/permalink/5/\" target=\"_blank\">Pipenv</a>.\r\n\r\n**Linux Installation**\r\n\r\nI recommend Ubuntu or Debian.F or this specific tutorial, I had mint installed because it''s light and it\u2019s just a personal preference.\r\n\r\n**Python Installation**\r\n\r\nDjango is a python framework so first ensure you have python installed. The default installed in my Os is 2.7. Check the version of python installed by typing  the following command into your shell:\r\n\r\n    $ python --version\r\n    $ python -V  (Mind the capital) \r\n    $ python2 -V\r\nThe above outputs\r\n\r\n     Python 2.7.12\r\nTo check for Python3 \r\n\r\n       $ python3 -V\r\nThe above outputs\r\n\r\n     Python 3.5.2\r\n\r\nIn this tutorial, we are using python 3.5 and higher. Type the command below to check which version 3 is installed\r\n\r\n    $ python3 --version\r\nYou should see something close to this:\r\n\r\n    Python 3.5.2 (default, Nov 23 2017, 16:37:01) \r\n    [GCC 5.4.0 20160609] on linux\r\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n    >>> \r\nYou can type CTRL+D to exit the interactive shell for now.\r\n\r\n**Installing Python**\r\n\r\nIf you do not have python installed,use this command:\r\n\r\n    $ sudo apt-get install python3.5\r\n> to install the latest version 3.6 check this <a href=\" https://mintguide.org/other/794-python-3-6-install-latest-version-into-linux-mint.html\" target=\"_blank\">tutorial</a> \r\n\r\nLet\u2019s dive right in\r\n\r\n**What you will learn**\r\n\r\n+ Create a virtual environment a name it <code>test</code>\r\n+ Create a sample project called <code>HelloDjango</code>\r\n+ Create a demo Django app  called <code>accounts</code>\r\n+ Finally configure the <code>settings.py</code>\r\n\r\n####  Setting up Virtual Environment\r\nWe could just create a Django application on our computer, but to control the packages unique for the application we will use  **Virtual Enviroment**. Virtual Environment is useful when you want to create isolated environments, each running their own versions of packages. We can even create virtual environments with various python versions! sounds cool. For this tutorial, I am going to use __virtualenv__.</p>\r\n#### Virtualenv\r\nWe can install virtualenv using python\u2019s package manager pip\r\n> Pip is a useful python package tool that installs, updates, and remove Python packages/libraries used by Django and your other Python apps.Pip come installed with python 2.7+downloaded from <a href=\"https://www.python.org/\" target=\"_blank\">python website</a>.You just have to upgrade it using the command \r\n     \r\nuse the command <pre><code>sudo pip install virtualenv</code></pre> to install using pip or simply run\r\n<pre><code>sudo apt get virtualenv</code></pre>\r\n \r\n\r\nYou should get something like this if <code>virtualenv</code>is already installed as in my case:\r\n\r\n    cindy@cindy-Veriton-M290 ~/Desktop $ pip install virtualenv\r\n    Requirement already satisfied: virtualenv in /home/cindy/.local/lib/python2.7/site-packages\r\n\r\n**Create and name  virtualenv**\r\n\r\nOnce you have successfully installed virtualenv, next we create the virtualenv test in the shell. I like creating my project in documents Folder. So right-click and choose open a terminal here option. Once you open the terminal, type:\r\n\r\n    $  virtualenv -p python3 test\r\n<code>test</code> is just  a name,you could give it any name.The -p points to the python version you want to use, in the above case python 3\r\n\r\n**Activate Virtualenv**\r\n\r\nNow that we have created our virtualenv test, we need to use it to install Django and other packages we will need. In order to use our virtualenv, we __must__ activate it. change directory to your virtual environment using:\r\n\r\n    $  cd test\r\nThen once you are inside the virtualenv directory, activate it as shown below:\r\n\r\n     $ source bin/activate\r\nBy now you should see your virtualenv in brackets\r\n\r\n    (test)  \r\nBelow is a sample from my console:\r\n\r\n    (test) cindy@cindy-Veriton-M290 ~/test $ \r\n\r\nTo check packages installed in the virtualenv you just created\r\nrun:\r\n    \r\n     $  pip freeze\r\n#### Django Installation\r\nour <code>virtualenv</code> is running, it is time to install Django .The version of Django at the time of writing this article is 2.0.2.Run:\r\n\r\n    $ pip install Django\r\nTo check for the packages installed run:\r\n\r\n      $ pip freeze \r\nyour console should list the installed packages\r\n\r\n    (test) cindy@cindy-Veriton-M290 ~/test $ pip freeze\r\n    Django==2.0.2\r\n    pytz==2018.3\r\n> To specify django version,use:\r\n    $ pip install django==<version>.For example to install django 1.11:\r\n     $ pip install django==1.11\r\n\r\n#### Creating Django Project\r\nDjango is successfully installed so let''s create our project Structure. Type this in your console:\r\n\r\n    django-admin startproject HelloDjango\r\nThe `startproject` command will create a structure similar to the one below:\r\n<pre><code class=\"python\">\r\nHelloDjango/\r\n        manage.py\r\n        HelloDjango/\r\n            __init__.py\r\n            settings.py\r\n            urls.py\r\n            wsgi.py\r\n</code></pre>\r\nThe structure may seem confusing at a glance but I will try to explain everything.\r\nThe outer <code>HelloDjango</code> is the container holding our project.It's okay to change the name to something else say \u2018src'.\r\nThe inner<code> HelloDjango </code>contains your site's configurations.I Highly recommend you leave it as it is, at least for now.\r\n_\r\nChange to the project directory.\r\n\r\n       cd  HelloDjango\r\n>The project directory is the outer HelloDjango containing manage.py file. If you changed its name to src, then change directory to src.\r\n\r\n    cd src\r\n#### Make Migrations and Run Test Server\r\n\r\nWe need to create a database and Django comes with SQLite.You are free to use any other databases of your choice. But for this tutorial, we will use the SQLite. Change directory to the project root and make migrations by typing the command:\r\n\r\n    $ python manage.py makemigrations\r\n    $ python manage.py migrate   \r\n \r\n**Test development server**\r\n\r\nTo test if your project is working well, go to your project root directory then type this :\r\n\r\n     $ python manage.py runserver\r\nYou should see something like this:\r\n\r\n    Performing system checks...\r\n    System check identified no issues (0 silenced).\r\n    February 28, 2018 - 18:58:33\r\n    Django version 2.0.2, using settings \r\n    Starting development server at http://127.0.0.1:8000/\r\n    Quit the server with CONTROL-C.\r\n\r\nWhen you go to  http://127.0.0.1:8000/,If Django was successfully installed you should get a success message \"congratulations\" \r\n![SucessPage](https://i.imgur.com/F3GEYtx.png)\r\n\r\n#### Create a Super user\r\nTo Interact with the admin site, we must create a Super User \r\n\r\n    $ python manage.py createsuperuser\r\nThen input the credentials. Below is a snippet\r\n\r\n    Username: laughing-blog\r\n    Email address: 'email Adress'\r\n    Password: \r\n    Password (again): \r\n\r\n\r\n Run the server and navigate to  `http://127.0.0.1:8000/admin` on the browser.Log in using superuser credentials you created above\r\n\r\n      python manage.py runserver\r\n####  Configuring  Settings.py\r\nFor the project to work properly, we need to make some changes in `settings.py`. This is the file where do our projects's configurations. Specify the database that will be used, set up  static files, tell Django where to find templates, setting timezone, changing language etc\r\n\r\n**Templates**\r\n\r\nFirst we going to change the  `Templates DIR`  to look like this <pre><code class=\"python\">'DIRS': [os.path.join(BASE_DIR, 'templates')],</code></pre>This simply tell Django to look for the templates folder  in project's root directory.\r\n\r\n**Staticfiles**\r\n\r\nDjango allows us to have static files tied to a particular app and it is already defined in the setting.py as `STATIC_URL =  '/static/'`.\r\nIn addition, we want to tell Django where to look for static files that are not tied to any  particular app by defining `STATICFILES_DIRS` .\r\n<pre><code class=\"python\">STATICFILES_DIRS = [\r\n    os.path.join(BASE_DIR, \"static\"),\r\n]</code></pre>\r\n\r\n**Change time zone**\r\n\r\nFinally,let's  change our timezone.I come from Nairobi so my time zone is Africa/Nairobi.Check yours on: <a href=\"https://en.wikipedia.org/wiki/List_of_time_zones_by_country\" target=\"_blank\">wikipedia</a><pre><code class=\"python\">LANGUAGE_CODE =  'en-us'\r\nTIME_ZONE =  'Africa/Nairobi'</code></pre>\r\n\r\n#### Creating an App\r\n\r\nApps are small components that are used to build projects. Usually, perform a specific task and can be reused in various projects. Create an app that manages user accounts and names it accounts by running the following command.\r\n\r\n     python manage.py startapp accounts //this app is called accounts\r\n\r\nThe app creates sub-modules such as <code>models.py</code>,<code>admin.py</code>,<code>views.py</code>,<code>apps.py</code>.\r\nDjango implements Model Template View (MTV) Pattern.\r\n\r\n     accounts/\r\n        __init__.py\r\n        admin.py\r\n        apps.py\r\n        migrations/\r\n            __init__.py\r\n        models.py\r\n        tests.py\r\n       views.py\r\n\r\n\r\nTo use  the app you have just created , activate it by adding it to `INSTALLED_APPS` in `settings.py`\r\n<pre><code class=\"python\">\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'accounts',\r\n    ]</code></pre>\r\n\r\n#### Conclusion\r\nThis can be overwhelming and so did awesome to reach this far. Most of the naming used are simply conventional and not a requirement. The installation and configurations above are ideal for large projects In a very small project, for example,urls.py can be included in any importable python module or views do not have to live inside views.py",
    "is_active": true,
    "publish": "2018-02-27T02:16:04Z",
    "created": "2019-03-25T01:07:54.364Z",
    "updated": "2019-04-15T08:45:22.266Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      1
    ]
  }
},
{
  "model": "blog.post",
  "pk": 2,
  "fields": {
    "title": "Sending Emails in  Django Application  using Mailjet",
    "slug": "sending-emails-django-application-using-mailjet",
    "author": 1,
    "image": "blog/2019/04/12/art-blue-boat-194094.jpg",
    "caption": "beautiful paper boats on solid surface by Miguel \u00c1. Padri\u00f1\u00e1n from Pexels",
    "credit": "https://www.pexels.com/photo/paper-boats-on-solid-surface-194094/",
    "body": "I believe sending emails is inevitable if your goal is to build and maintain a strong relationship with your clients. The aim is to attract readers, keep them updated and satisfied so that they keep coming back as well as attract new users.\r\nHow do we attract and retain our clients?\r\nTo answer this, I will categorize the type of emails we usually send into two main groups \r\n\r\n1. Marketing Emails: These are those emails you can send to a list of subscribers enlightening them on the products/services you have on sale, new product you are launching soon. I  like to think of it as one-to-many kind of email. Your guess is as good as mine by now what a great marketing tool! \r\n2. Transactional emails.T his is a one-to-one email you send to your users. For example sending confirmation link before a new registration is active, sending welcome messages for new signups, password resets e.t.c.\r\nThese types of email can greatly improve user experience.\r\nTake confirming user registration for example. I know we all hate that extra step of being told to confirm your registration by clicking a token/link. I am guilty as charged. But wait, have you ever received a newsletter you never signed up for right in your email? It's annoying. Sending confirmation emails to ensure:\r\n\r\n     + you are not bothering the wrong person.\r\n     + Verify the existence of email addresses and will greatly reduce bounce rates\r\n     + Reduce spammers\r\n     + Ensure sensitive information you will send via email reach the intended recipient\r\n\r\n### Sending emails \r\nLet start sending emails from our Django application. There are two main ways of sending emails from your application.\r\n\r\n+ Web API\r\n+ SMTP relay\r\n . \r\n><strong>tip</strong>: SMTP stands for Simple Mail Transfer Protocol.\r\n\r\nI use smtp all the time. To send emails you must have an email provider\r\n### Which Email provider do I choose from?\r\nThere are many email providers to choose from and many factors to consider too based on your requirements. A personal blog or a small company with low traffic, for example, may prioritize cost and go for a free service with scalability.\r\nThe decision is mostly influenced by cost, traffic and customer service the said provider offers.\r\nI will highlight just but a few below.\r\n\r\n1. Gmail: Gmail is free and primarily it is for personal use.Perfect for testing purposes and if you don't have a domain name. In production, you may need emails associated with your domain name.\r\n2.  Sendgrid\r\n3. Mailgun: Maigun also works very well with Django and the documentation is great. There is a free account version for testing purposes but to send customized domain emails, you need to upgrade by providing credit card details to activate up to 10,000 emails for free.\r\n4.  Mailjet: I love mailjet because it is very pocket-friendly and offers scalability as you grow, just what I need! When starting out and your site has few users, they have your back.you can send up to 200 free emails every day including both transactional and marketing emails. That is  6000 free emails per month. \r\n### Why Choose Mailjet\r\n+ The pricing is scalable, more of \"pay for what you use\".\r\n+ You can use the same account for sending both transactional and marketing emails.\r\n+ There is a free plan of up to 200 emails daily both transactional and marketing. \r\n\r\n<p> To use mailjet you have to create an account.So go to <a href=\"https://www.mailjet.com/\" target=\"_blank\">Mailjet</a> to signup or login in if you already have an account.</p>\r\n\r\n><strong>Note</strong>: <p> <a href=\"https://www.mailjet.com/?tap_a=25852-4bddf6&amp;tap_s=243499-30c71b&amp;aff=243499-30c71b\" target=\"_blank\">I am using mailjet for this site.You could use it too and support my site by using this link </a>\r\n\r\nAfter successful login, go to accounts settings on the top right to start your configurations.\r\n![Account Information ](https://i.imgur.com/iPPqKlp.png)\r\n\r\n 1. The first step is  to add sender addresses(email where we will be sending our emails from), and we can do that by :\r\n\r\n    + Adding Domain:\r\nYou Key in the actual Domain name and label it as you wish in the label field. The advantage of using domain is that all senders associated with the domain name will automatically be validated\r\n![Add Domain](https://i.imgur.com/A0gIvcK.png)\r\nTo confirm ownership of the domain, Mailjet has two options.\r\n        1. To Host a temporary file on your website by creating a text file with the following name:\r\n                  \r\n                filename.txt // replace filename with actual text\r\n\r\n        2.  Create a DNS record\r\nAfter successfully verifying that you own the domain by adding .txt file on your site or by using DNS. If you go to list of domain the status should be active.\r\n![List ofDomain](https://i.imgur.com/kSvKEk4.png)\r\n\r\n     + To add Addresses:\r\nIt is Highly recommended that you add the sender address if you are on free hosting.\r\n Specify if you want to send transactional emails, for example, welcome emails, bulk emails such as in the case of newsletters or choose both/I don't know option.</p>\r\n ![Add sender Adress]( https://i.imgur.com/M2iMabx.png)\r\n\r\n 2. The second step is to Configure the **SPF** and **DKIM** settings for all your domains.\r\nSPF and DKIM are authenticating systems ensuring that emails are delivered. These settings allow email services like Gmail to accept emails from mailjet. Read more on  <a href=\"https://app.mailjet.com/docs/spf-dkim-guide\" target=\"_blank\">spf&dkimguide</a>\r\nTo authenticate, you need to access your DNS records from your hosting provider and copy the SPF and DKIM values from mailgun to your DNS records. \r\n![Datatocopy]( https://i.imgur.com/UoBjDkF.png)\r\n<p>Once Verified,status should change from pending to active</p>\r\n\r\n 3. The final step is to get the SMTP settings.\r\n> you can Use API, SMTP IS just a personal choice. Remember to keep your key and passwords away from everyone else.\r\n\r\n![SMTP]( https://i.imgur.com/qLldqCE.png)\r\n\r\n### Configuring Django  with mailjet\r\n\r\nNow that we are done configuring mailjet,lets use it in django to  start sending emails.go to <code>Settings.py</code> and add the following:\r\n\r\n    EMAIL_HOST = 'host-name'\r\n    EMAIL_PORT = 587\r\n    EMAIL_HOST_USER = \"your usernme credentials\"\r\n    EMAIL_HOST_PASSWORD = \"yor password\"\r\n    EMAIL_USE_TLS = True\r\n\r\n### send_mail() in your Django Application\r\ndjango uses a module called <code>django.core.mail</code>\r\nThe basic way to send email is using django.core.mail.send_mail().\r\n<p>It takes the parameters:</p>\r\n\r\n  + subject: The subject of the email and its a string.\r\n  + message: The body of the email also takes a  string.\r\n  + from_email: Specify the sender.\r\n  + recipient_list: List of recipients\r\n  + fail_silently \u2212 Bool, if false send_mail will raise an exception in case of error.\r\n\r\n**sample code**\r\n\r\n    from django.core.mail import send_mail\r\n    send_mail(subject,message,sender email,[receipient email], fail_silently=False)",
    "is_active": true,
    "publish": "2018-03-23T05:39:51Z",
    "created": "2019-03-25T01:20:38.925Z",
    "updated": "2019-04-13T03:33:35.866Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      1
    ]
  }
},
{
  "model": "blog.post",
  "pk": 3,
  "fields": {
    "title": "Laughing Blog Tutorial Part 1-The Project Structure",
    "slug": "laughing-blog-tutorial-part-1-project-structure",
    "author": 1,
    "image": "blog/2019/04/13/beverage-3157395_1280.jpg",
    "caption": "laptop,phone, cup of coffee on top of a solid office desk written dream",
    "credit": "https://pixabay.com/photos/beverage-blog-blogger-break-3157395/",
    "body": "My journey as a programmer has taught me one valuable lesson: To effectively learn how to write and understand programming concepts, never underestimate the value of building real-life applications. I  remember staying up late trying to grasp the concepts of programming. But to make the concepts stick, I embarked on a journey to create <a href=\"https://achiengcindy.com\" target=\"_blank\">Cindy Achieng Website</a> and share my journey with you all.\r\n\r\nThe aim of this tutorial series, `The laughing blog`, is to create a fully functional blog in Django.\r\n#### Overview\r\nWe will implement functionalities such as :\r\n\r\n+ Registration and Authentication\r\n+ Newsletter\r\n+ Sending Emails\r\n+ Comment system\r\n+ Social media share\r\n\r\nThe code can be found on <a href=\"https://github.com/achiengcindy/laughing_blog\" target=\"__blank\">github</a>. \r\n\r\nIf you follow through, you too can create your own blog or even earn from it.\r\n\r\n**Prerequisites**\r\n\r\n+ Basic Git  Knowledge\r\n+ A github or bitbucket account.If you dont have,create one for free on <a href=\"https://github.com\" target=\"__blank\"> github</a> or  <a href=\"https://github.com\" target=\"__blank\"> bitbucket</a>\r\n+ Django  basics.If you are new to django check  my previous tutorial on <a href=\"https://achiengcindy.com/permalink/1/\" target=\"__blank\">Django Environment in Linux</a> .\r\n+ Text Editor of choice.I will be using Sublime Text.You can download it <a href=\"https://www.sublimetext.com/3\" target=\"__blank\">here</a>.\r\n\r\n#### Setting up the laughing-blog project\r\n\r\nIn this tutorial, you will learn how to create Django project structure, learn `git` and some very useful python libraries such as  `whitenoise` and `python decouple`.\r\n\r\nI will use `pip` and `virtualenv` to create the  project structure  however, you can use  <a href=\"https://achiengcindy.com/permalink/5/\" target=\"__blank\">pipenv</a>\r\n\r\n** let's get started**\r\n\r\n\r\nCreate a folder and name it tutorial where our project will be stored.\r\n\r\n     mkdir tutorial && cd tutorial\r\nNice, next we have to create a Virtual Environment for our project \r\n\r\n     virtualenv env -p python3 \r\n  >specify the python version .We will use `python3`\r\n\r\nTo use our virtual environment we must <strong>activate</strong> it\r\n\r\n     source env/bin/activate\r\n\r\nAfter activating the virtual environment. Install Django using the command below:\r\n\r\n    $ pip3 install django\r\n\r\nWe are going to create the project named laughing_blog by using the command below:\r\n\r\n     $ django-admin startproject laughing_blog\r\n If you change Directory to laughing_blog, you should have a structure like this: <pre><code class= ''python''>\r\nlaughing_blog\r\n--laughing_blog\r\n----__init__.py\r\n----settings.py\r\n----urls.py\r\n----wsgi.py\r\n--manage.py\r\n</code></pre>\r\nChange the outer laughing_blog to `src` ( it is just a container that holds our project).\r\nTo make sure that django is successfully installed run server using the command <pre><code class =\"python\">python manage.py runserver</code></pre> and if all went well,you should see this page:\r\n\r\n![](https://i.imgur.com/F3GEYtx.png)\r\n\r\n Now we are all set to start writing codes.However, there are some configurations and libraries I want to introduce. \r\n#### Python-decouple\r\n<code>Python Decouple</code> will help us separate sensitive settings from the project .Storing passwords and other sensitive information such as <code>secret key</code> in <code>settings.py</code> is not a great idea and that is why we will use <a href=\"https://pypi.python.org/pypi/python-decouple\" target=\"__blank\">python-decouple</a>. Install it using the following command:\r\n\r\n    $ pip3 install python-decouple\r\nAfter successfully installing <code>Python-decouple</code>, create a .env text file on your project's root directory.\r\n\r\n**Using Python Decouple**\r\n<strong>.env</strong>\r\n\r\nThis is the file where all  the sensitive information are stored.So far,we need to store our secret key and debug status.It should look like this: <pre><code class=\"python\">SECRET_KEY = your key\r\nDEBUG = True</code></pre> \r\n\r\n<strong>settings.py</strong>\r\n\r\nImport `config ` object   and place it below <code> import os</code>.\r\n         \r\n      from decouple import config\r\nThis is a snippet from my <code>settings.py.</code>\r\n\r\n    import os\r\n    from decouple import config\r\n Replace the secret key and debug with the following:\r\n\r\n    SECRET_KEY = config('SECRET_KEY'')\r\n    DEBUG = config('DEBUG', cast=bool)\r\n   \r\n\r\n#### Git\r\nIt is important to push your changes to a remote repository. Initialize git using:\r\n\r\n     $ git init// Initializes git \r\nNext, we want git to  ignore some files with secret information such as the settings, database, etc.Now,create a gitignore file and add the .env, *.pyc ,db.sqlite3 and any other  text file in it.To create gitignore use the command:\r\n\r\n     $ touch .gitignore\r\nNext, let's add all our changes, commit and push\r\n\r\n     git add * //adds all changes\r\n     git commit -m \"initial commit\"\r\n     git remote add origin https://github.com/<your username>/laughing_blog.git \r\n     git push -u origin master\r\n\r\n#### Templates\r\nHtml is used to display data on the browser and not python.\r\nDjango is a web framework offers a way to display HTML dynamically by using the powerful in-built <strong> template tags</strong>. Remember HTML is static while python is dynamic. \r\nDjango templating enable us to separate the presentation of a document from its data. \r\nWe could embed HTML on python code, but it is not a good idea because:\r\n\r\n1. In large projects, it is common to have front-end developers handling HTML and back-end developers handling python. If HTML is hard-coded in python code, it would be difficult for both developers to edit the same file at the same time without interference.\r\n2. In a single application, you may need to write many lines of HTML codes and troubleshooting the code can be messy if HTML is hard-coded in the python code.\r\n\r\n**Setting up Django Templates**\r\n\r\nWe want to create the templates directory in the projects' root directory. We can achieve this by modifying the settings.TEMPLATE-DIRS  by adding this:\r\n     \r\n    \"DIRS\": [os.path.join(BASE_DIR, ''templates'')],\r\n\t\r\nThe `DIRS` defines a list of directories where Django should look for template source files.\r\n\r\nlet''s create the templates directory and  then create a file called <strong>base.html </strong> to include the project''s main html structure\r\n\r\n    $ mkdir templates\r\n    $ cd templates\r\n       base.html\r\n\r\nsnippet for base.html\r\n\r\n    {% load staticfiles %}\r\n    <!Doctype html>\r\n    <html>\r\n    <head>\r\n\t    <title> Laughing blog</title>\r\n    </head>\r\n    <body>\r\n       {% block content %}{% endblock %}\r\n    </body>\r\n    </html>\r\n#### How to Serve Static Files in Django\r\nWeb applications will need additional files like CSS, scripts, and Images for the application and  <code> user-uploaded content</code> such as profiles pictures. These files  can be categorized as:\r\n\r\n1. Static files: Resource used by the application such as scripts, images\r\n2. Media files: These are the content uploaded by the user, say user profile picture. We will talk about this later.\r\n\r\n**Configuring Static Files**\r\n\r\nManaging static files in django  can be complicated especially if you are not familiar with Django.In <code>settings.py</code> make sure <code> django.contrib.staticfiles</code> in  <code>INSTALLED_APPS</code>.In, Most cases,it is already defined.\r\n\r\n**STATIC_URL**\r\n\r\nIn <code>settings.py </code> you will find this line of code\r\n\r\n       STATIC_URL = ''/static/''\r\nThis is where Django serves static files for a particular app in your project. Django allows you to have several static folders in a project. For this project, we will create just one static folder  in the root project directory so let's configure <strong>staticfiles-dirs</strong>\r\n\r\n**STATICFILES_DIRS**\r\n\r\nLet's say you have a project and most apps share static assets like styling or images, or in addition to the static files tied to a particular app, you require additional static assets then define<code>STATICFILES_DIRS</code>.\r\n\r\nThe `STATICFILES_DIRS` tuple tells Django where to look for static files that are not tied to a particular app. \r\n\r\n      STATICFILES_DIRS = [\r\n     os.path.join(BASE_DIR, \"static\"),\r\n    ]\r\n\r\nIn this case, we just told Django to also look for static files in a folder called `static` in our project's root folder, not just in our apps.\r\n\t\r\nThen create the static directory in the project's root folder\r\n\r\n    $ mkdir static\r\n#### Serving  Static Files in Development\r\nWhen <code> django.contrib.staticfiles</code> is installed,running <code>runserver</code> command automatically serve the static files otherwise serve them manually by:\r\n\r\nProject's <code>urls.py</code>\r\n\r\n    from django.conf import settings\r\n    from django.conf.urls.static import static\r\n    urlpatterns = [\r\n         ... \r\n     ] \r\n     + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\r\n\r\n**STATIC_ROOT**\r\n\r\nThis is the storage folder for every static files after running the <code>collectstatic </code> command.It collects all the static files in one place.\r\nLet us tell django to collect all our static files in a folder called <strong> staticfiles</strong>\r\n\r\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\r\nThis is very important in production and<code>whitenoise</code> handles this very well.\r\n\r\n#### Whitenoise\r\n Managing static files in production is even more complicated,at-least it was for me! To manage our static files with less hustle,we will  install a 3rd party library <a href=\"http://whitenoise.evans.io/en/stable/django.html\" target=\"_blank\">whitenoise</a>\r\n\r\nTo install whitenoise, run:\r\n\r\n     pip3 install whitenoise\r\n\r\nTo use whitenoise in Django.We edit <code>settings.py</code> by adding it to <code>MIDDLEWARE_CLASSES</code>below the django <code>SecurityMiddleware</code>\r\n\r\n    MIDDLEWARE = [\r\n        #'django.middleware.security.SecurityMiddleware',\r\n        'whitenoise.middleware.WhiteNoiseMiddleware',\r\n\t    ...\r\n    ]\r\n\r\nTo enable compression to add the following :\r\n    \r\n    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n#### Conclusion\r\nWe created Virtual Environment, Installed Django, installed Python-decouple and created our template and static files directory. We also create gitignore file and added the .env text file we created. Meet you in the next tutorial!",
    "is_active": true,
    "publish": "2018-04-01T03:26:53Z",
    "created": "2019-03-25T01:28:26.837Z",
    "updated": "2019-04-13T03:42:51.374Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      2,
      1
    ]
  }
},
{
  "model": "blog.post",
  "pk": 4,
  "fields": {
    "title": "Laughing Blog Tutorial  Part 2 - Handling Django Forms",
    "slug": "laughing-blog-tutorial-part-2-handling-django-forms",
    "author": 1,
    "image": "blog/2019/04/12/desk.jpg",
    "caption": "Laughing Blog Tutorial",
    "credit": "https://achiengcindy.com/",
    "body": "In this tutorial, we will focus on creating and processing forms. In addition, we will learn about Django apps and sending emails in Django via SMTP server.\r\n\r\nTo illustrate this, we will create a newsletter app and send welcome emails to our new subscriptions.\r\n\r\n### Creating Newsletter App\r\nApps are small components used to build projects. An app in Django is installed by placing in `settings.INSTALLED_APPS.`  Usually, apps perform a specific function and can be reused in\r\nvarious projects.\r\n\r\nSince we creating a newsletter, let us create an app and name it newsletter.M ake sure you are in the same directory as `manage.py` and type:\r\n\r\n    python manage.py startapp newsletter\r\nWhen Django create the `newsletter app`, it also  creates some files and the structure look like this:\r\n<pre><code class=\"python\"> newsletter/\r\n        __init__.py\r\n        admin.py\r\n        apps.py\r\n        migrations/\r\n            __init__.py\r\n        models.py\r\n        tests.py\r\n       views.py</code></pre>\r\nTo use the app we add it to activate by adding it to `settings.INSTALLED_APPS` \r\n    \r\n    INSTALLED_APPS = [\r\n        ...\r\n        'newsletter',\r\n    ]\r\nNow our app is installed, let make it do something\r\n###  Creating Models\r\nNext, we going to create our model in models.py. For each model defined Django will create a table for it in the database. Let's define our model and name it  NewsUsers.\r\nwrite the following code in your __newsletter/models.py__  \r\n\r\n<pre><code class= \"python\">from django.db import models\r\n\r\nclass NewsUsers(models.Model):\r\n\tname = models.CharField(max_length = 30)\r\n\temail = models.EmailField()\r\n\tdate_added = models.DateField(auto_now_add=True)\r\n\r\n\t\tdef __str__(self):\r\n\t\t\treturn self.email\r\n</code></pre>\r\n\r\n+ import the <code>models</code>.\r\n+ Next,I have defined 3 fields:<code>name</code>,<code>email</code> and  the <code>date_added</code>\r\n\r\n#### Make and Run Migrations.\r\n      $ python manage.py makemigrations newsletter\r\n      $ python manage.py migrate\r\n\r\n###  Adding Models to Admin Site\r\nWe will create a simple admin site to manage newsletters Users\r\n<pre><code class = \" python\">from django.contrib import admin\r\nfrom .models import NewsUsers\r\nclass NewsletterAdmin(admin.ModelAdmin):\r\n\tlist_display =('email','date_added',)\r\nadmin.site.register(NewsUsers, NewsletterAdmin) </code></pre>\r\n#### Create a Super user\r\nTo Interact with the admin site,we must create a Super User \r\n\r\n    $ python manage.py createsuperuser\r\nThen input the credentials. Below is a snippet\r\n\r\n    Username: laughing-blog\r\n    Email address: \"email Adress\"\r\n    Password: \r\n    Password (again): \r\n\r\n#### RunServer\r\n Run the server and navigate to  `http://127.0.0.1:8000/admin` on the browser.Log in using super user credentials you created above\r\n\r\n      python manage.py runserver\r\nIf you are successful then you will see an interface similar to this:\r\n\r\n![](https://i.imgur.com/krXpt4U.png?1)\r\n\r\n\r\nNote: Django  is 'smart' and naturally pluralizes the model In admin \r\n\r\nWe have NewsUserss and that is not cool! To avoid such a  scenario, define meta class in models and set  verbose _name=' singular'  and verbose_name_plural.\r\n\r\nYour  models should look like this\r\n<pre><code class = \" python\">from django.db import models\r\nclass NewsUsers(models.Model):\r\n\tname = models.CharField(max_length = 30)\r\n\temail = models.EmailField()\r\n\tdate_added = models.DateField(auto_now_add=True)\r\n\r\n\tclass Meta:\r\n\t\tverbose_name = \"NewsUser\"\r\n\t\tverbose_name_plural = \"NewsUsers\"\r\n\r\n\t\tdef __str__(self):\r\n\t\t\treturn self.email\r\n</code></pre>\r\n>Note: always run migrations after modifying the models\r\n\r\nAfter applying migrations, run the server and navigate to the admin interface and the extra `s` should be gone and if you click to add the user, you should be able to add users in the newsletter list\r\n\r\n![](https://i.imgur.com/m4zwiYC.png)\r\n\r\n###  Creating the Newsletter Form\r\nDjango allows you to create a regular form and also to build forms from the models. Depending on your needs you can choose either of the two methods. The standard forms are best in scenarios where the forms do not interact with the database directly.\r\n\r\nDjango has two base classes for building forms.\r\n\r\n+ Forms: Allows you to build Standard Forms\r\n+ ModelForm: Allows you to build forms from a model by defining fields using the <code>Meta class</code>\r\n\r\nWe need to create a form that regular users can use to subscribe to our newsletter using the form base.\r\nCreate a new file called <code>forms.py</code> in  <code>newsletter app</code>.\r\nTo create our <code>ModelForm</code>, import the model class \r\n<pre><code class = \" python\">from django import forms\r\nfrom .models import NewsUsers\r\nclass NewsUserForm(forms.ModelForm):\r\n\tclass Meta:\r\n\t\tmodel = NewsUsers\r\n\t\tfields = ['name', 'email']</code></pre>\r\n\r\n### Creating newsletter/Views\r\n<pre><code class = \" python\">from django.shortcuts import render\r\nfrom .forms import NewsUserForm\r\nfrom . models import NewsUsers\r\n\r\ndef newsletter_subscribe(request):\r\n  if request.method == 'POST':\r\n    form = NewsUserForm(request.POST)\r\n    if form.is_valid():\r\n      instance = form.save()\r\n      print('your email is already added to our database')\r\n  else:\r\n    form = NewsUserForm()\r\n  context = {'form':form}\r\n  template = \"newsletter/subscribe.html\"\r\n  return render(request, template, context)</code></pre>\r\n    \r\n<strong>explanation</strong>\r\n\r\nThe above code seems complex and I will try to decode it.\r\n\r\n+ Step1: We must import <code>NewsUserForm</code> from  <code>form.py</code>   and  <code>NewsUsers</code> from  <code>models.</code> \r\n+ Step2 : When our view is initially loaded with a GET request, we create a new form instance that will be used to display the empty form in the template. <code> form = NewsUserForm()</code>\r\n+ Step3 : If it is a POST request , we create a form instance and populate it with data from the request.<pre><code class ='python'>if request.method == 'POST':\r\n    form = NewsUserForm(request.POST)</code></pre>\r\n+ Step4 : Then check for form validity  by the <code>is_valid()</code>method,this method will return true if the fields contain valid data or false if invalid throwing errors.\r\n\r\n### Creating newsletter/urls.py\r\nWe then create a new file in newsletter app and name it <code>urls.py</code>\r\n<pre><code class = \" python\">from django.urls import path \r\nfrom .views  import  newsletter_subscribe\r\napp_name = 'newsletter'\r\nurlpatterns = [\r\n        path('subscribe', newsletter_subscribe, name='subscribe'),\r\n     ]</code></pre>\r\n#### Main urls.py\r\n<pre><code class=\"python\">from django.contrib import admin\r\nfrom django.urls import path,include\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('newsletter/',include('newsletter.urls' , namespace='newsletter')),\r\n]</code></pre>\r\n#### RunServer\r\n\r\n     $ python manage.py runserver\r\n\r\nWhen you navigate to  `http://127.0.0.1:8000/newsletter` on the browser, it will return an error that the template does not exist.\r\n\r\n![template](https://i.imgur.com/GRNghQt.png)\r\n\r\nDo not panic just yet, we just need to create the template subscribe.html\r\n###  Rendering Templates\r\nCreate a templates directory in newsletter app and another template  inside it called newsletter,then create <code>subscribe.html</code> file.The structure should look like this:\r\n\r\n    newsletter\r\n        templates\r\n            newsletter\r\n            subscribe.html\r\n\r\n__subscribe.html__\r\n\r\n    {% extends \"base.html\" %}\r\n    {% block content %}\r\n    <form action=\"{% url 'newsletter:subscribe' %}\" method=\"post\">\r\n\t{% csrf_token %}\r\n\t{{ form.as_p }}\r\n\t<button type=\"submit\">Submit</button>\r\n\t</form>\r\n    {% endblock %}\r\n   \r\n><strong>Note</strong>: you must include cross site request forgery {% csrf_token %} tag when using POST\r\n\r\nRun the Server again and navigate to `http://127.0.0.1:8000/newsletter/subscribe` \r\n\r\n     $ python manage.py runserver\r\nyou should see the form below:\r\n\r\n ![](https://i.imgur.com/044ItZF.png)\r\n\r\nFill in your name and email and when you hit submit, it saves\r\ncheck the admin interface and you should see the user you just added.\r\n\r\n### Recap\r\nSo far we have created\r\n\r\n+ Newsletter App\r\n+ Creating Models\r\n+ Adding Models to admin site\r\n+ Creating forms from models\r\n+ Writing views\r\n+ Creating urls\r\n+ Creating Super User\r\n### newsletter/views.py\r\nThe above view will work just fine, but there is no validation on the email field. A user can input the same email address severally.\r\n>Task: try using the same email more than once and it will save\r\n\r\nWe do not want that to happen right? so let's add some queries to filter the email. If the email already exists we notify the user it already exists else save.\r\nUpdate your views to look like this:\r\n\r\n<pre><code class=\"python\">from django.shortcuts import render\r\nfrom .forms import NewsUserForm\r\nfrom .models import NewsUsers\r\n\r\ndef newsletter_subscribe(request):\r\n  if request.method == 'POST':\r\n    form = NewsUserForm(request.POST)\r\n    if form.is_valid():\r\n      instance = form.save(commit=False) #we dont want to save just yet\r\n      if NewsUsers.objects.filter(email=instance.email).exists():\r\n        print( \"your Email Already exists in our database\")\r\n      else:\r\n        instance.save()\r\n        print( \"your Email has been submitted to our database\")    \r\n  else:\r\n    form = NewsUserForm()\r\n\r\n  context = {'form':form}\r\n  template = \"newsletter/subscribe.html\"\r\n  return render(request, template, context)\r\n</code></pre>\r\n<strong>explanation</strong>\r\n\r\nA continuation from the first <code>views.py</code>\r\n\r\n+ Step5: Create the model instance with the save() method, but  don't save it to the database just yet  by calling <code>commit = False</code>\r\n>+ The save() method creates an instance of the model that the form is linked to and saves it to the database.\r\n>+ If called with commit=False, it creates the model instance but doesn't save to the database just yet!\r\n\r\n+ Step6 : Then, we check if the email exists by using `filter` before we save. If it exists, we tell the user it already exists else save and display to the user it has been added to our database.\r\n>Task: fill the form using a new email and check if it saves. We have added a notification message on the console, so check your console for guidance. Use the same email again and check the console\r\n\r\nNow it validates our emails,Great Work!\r\n### Sending Emails\r\nSending Emails with Django is quite simple.All we need is  an Email service Provider.You can use  gmail for development and testing but for production,you definitely need an email provider .Refer to  \r\n<a href=\"https://achiengcindy.com/permalink/2/\"  target=_\"blank\">Sending Emails with mailjet</a> because I will be using <a href=\"https://www.mailjet.com/?tap_a=25852-4bddf6&amp;tap_s=243499-30c71b&amp;aff=243499-30c71b\" target=\"_blank\">mailjet</a>\r\n ><strong>Note</strong>:<a href=\"https://www.mailjet.com/?tap_a=25852-4bddf6&amp;tap_s=243499-30c71b&amp;aff=243499-30c71b\" target=\"_blank\"> I am using mailjet for this site.You could use it too.Please click the link  to support my blog</a>\r\n \r\nRemember the `.env` file we created in <a href=\"https://achiengcindy.com/permalink/3/\" target=\"_blank\">Project Structure</a> and update it with your `smtp` credentials\r\n\r\n    EMAIL_HOST=in-v3.mailjet.com\r\n    EMAIL_HOST_USER=\"Your Username\"\r\n    EMAIL_HOST_PASSWORD=\"Your Password\"\r\n    EMAIL_PORT=587\r\n    EMAIL_USE_TLS=True\r\nReplace \"Your Username\"  with the actual username and \"Your Password\" with your actual password.\r\n\r\n__settings.py__\r\n<pre><code class = 'python'>EMAIL_HOST = config('EMAIL_HOST')\r\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\r\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\r\nEMAIL_PORT = config('EMAIL_PORT', cast=int)\r\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)\r\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')\r\n</code></pre>\r\n\r\n __newsletter/views.py__\r\n\r\nWe want to start sending emails, Import <code> send_mail</code> .\r\n\r\n<pre><code class = \" python\">from django.shortcuts import render\r\nfrom .forms import NewsUserForm\r\nfrom . models import NewsUsers\r\nfrom django.core.mail import send_mail\r\n\r\ndef newsletter_subscribe(request):\r\n   if request.method == 'POST':\r\n    form = NewsUserForm(request.POST)\r\n    if form.is_valid():\r\n      instance = form.save(commit=False) #we do not want to save just yet\r\n      if NewsUsers.objects.filter(email=instance.email).exists():\r\n        print('your email Already exists in our database')\r\n      else:\r\n        instance.save()\r\n        print('your email has been submitted to our database')\r\n        send_mail('Laughing blog tutorial series', 'welcome', 'mail@achiengcindy.com',[instance.email], fail_silently=False) \r\n  else:\r\n    form = NewsUserForm()\r\n  context = {'form':form}\r\n  template = \"newsletter/subscribe.html\"\r\n  return render(request, template, context)\r\n</code></pre>\r\n### Conclusion\r\nWe have successfully created a basic <code>newsletter app</code> and managed to  send a welcome message to new subscriptions.The  code for this tutorial is available on  <a target=\"_blank\" href=\"https://github.com/achiengcindy/laughing_blog\"> Github </a>.\r\n\r\nIn the next tutorial, we will continue to build our newsletter app by making it more readable! \r\n\r\n<a href=\"https://twitter.com/achiengcindyKE\" target=\"_blank\">Connect with me on Twitter</a>",
    "is_active": true,
    "publish": "2018-04-07T09:02:55Z",
    "created": "2019-03-25T02:25:16.217Z",
    "updated": "2019-04-12T17:02:05.256Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      2,
      1
    ]
  }
},
{
  "model": "blog.post",
  "pk": 5,
  "fields": {
    "title": "Pipenv, the new Python packaging tool",
    "slug": "pipenv-new-python-packaging-tool",
    "author": 1,
    "image": "blog/2019/04/12/pipenv.jpg",
    "caption": "image with python logo with pipenv text on a blue background",
    "credit": "https://achiengcindy.com/",
    "body": "Clearly,I have been living under a rock but not anymore! I shared an article <a href=\"https://achiengcindy.com/permalink/1/\"  target=\"_blank\">using pipi</a> and  <a href=\"https://dev.to/hangtwenty/comment/2m3e\"  target=\"_blank\">  M. Floering</a> suggested I check <code>pipenv</code>. You guessed right , yes I did and I am loving it!\r\n<code>Pipenv</code> is the official recommended python packaging tool  acccording to <a href=\"https://docs.pipenv.org/\"  target=\"_blank\">  pipenv.org</a>.\r\nIt is a great tool for managing your project's dependencies as well as install and uninstall packages.\r\n\r\nSeems like  pip and virtualenv did just well, **but why pipenv?**\r\n\r\n1. Think of <code>pipenv </code> as a powerful  combination of pip and virtualenv.\r\n2. Goodbye to  manually creating and managing you virtual environments <code>pipenv </code>does it for you!.\r\n3. Great at managing project's dependencies.Instead of pip''''s <code>requirements.txt</code>,  <code>pipenv </code> creates two files the <code>pipfile</code> for the packages you installed directly and <code>pipfile.lock</code> for the dependencies and the specific version of the packages based on your pipfile.\r\n\r\n**pipenv workfow**\r\n\r\n1. Create virtualenv if doesn't exist already. \r\n2. Create <code>pipfile</code> to manage the packages installed by you\r\n3. Finally, creates <code>pipfile.lock</code> to manage dependencies for the packages in pipfile\r\n#### Let's get started!\r\nWe use <code> pip</code> to install <code>pipenv</code>,so ensure you have  both python and pip installed.\r\nTo check if pip is  installed run:\r\n\t\r\n\t$ pip --version\r\n.. and python:\r\n\r\n\t$ python --version\r\n\r\n** Installing pipenv **\r\n\r\n\t$ pip install --user pipenv\r\n><strong>Note</strong>: I have used the user installation otherwise just run  $ pip install  pipenv .\r\n\r\n**Using pipenv**\r\n\r\nNow that we have successfully installed <code>pipenv</code>, let's use it to create the project directory and name it(I will call mine laughing-blog) and then change directory into the project's folder.\r\nLet's  Initiate  <code>pipenv</code> by using the <code> install</code> command.\r\n\r\n\t$ mkdir laughing-blog //projectname\r\n\t$ cd laughing-blog\r\n\t$ pipenv --three install\r\n><strong>Note</strong>:Specify  your python version by using <code>$ pipenv --three</code> for python 3 and <code>$ pipenv --two </code> for python 2.To use an  abitrary python version do:\r\n<code>pipenv --python 3.6.4</code> or just <code>$ pipenv install</code> to use the default python  version.\r\n\r\nThe above code creates a new virtual environment for your project if it doesn\u2019t exist already and the two magic files, `Pipfile` and `Pipfile.lock` in your project directory.\r\n\r\nBelow is a breakdown of the  ** pipenv install** output.\r\n\r\n**virtualenv**\r\n\r\n    Creating a virtualenv for this project\u2026\r\n\tUsing /usr/bin/python3 (3.5.2) to create virtualenv\r\n\tVirtualenv location: /home/cindy/.local/share/virtualenvs/laughing-blog-FpALE3CM\r\n\r\n**pipfile**\r\n\r\n    Creating a Pipfile for this project\u2026\r\n \r\nFinally, **pipfile.lock**\r\n\r\n    Pipfile.lock not found, creating\u2026\r\n    Locking [dev-packages] dependencies\u2026\r\n    Locking [packages] dependencies\u2026\r\n    Updated Pipfile.lock (711973)!\r\n    Installing dependencies from Pipfile.lock (711973)\u2026\r\n    \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 0/0 \u2014 00:00:00\r\n\r\n**Activating Virtualenv**\r\n\r\nTo activate virtualenv,simply run:\r\n\r\n\t$ pipenv shell\r\nTo exit virtulalenv,run:\r\n\r\n\t$ exit\r\n\r\n**Managing Packages**\r\n\r\nTo install a package simply run:\r\n\r\n    $ pipenv  install <packagename>\r\n... and to remove the package in the pipfile run:\r\n\r\n    $ pipenv  uninstall <packagename> \r\n    \r\n#### understanding pipfile and pipfile.lock\r\n**Pipfile**\r\n\r\n<code>Pipfile</code> manages the packages that you install,think of it as an  upgrade of <code>requirements.txt</code>.\r\n\r\n What makes pipfile  superior to requirements.txt\r\n\r\nLets look at a sample of  <code>requirements.txt</code> file\r\n\r\n><strong>Note</strong>:simply run <code>pip freeze > requirements.txt</code> to generate the above file\r\n\r\n    ```\r\n    certifi==2018.4.16\r\n    chardet==3.0.4\r\n    defusedxml==0.5.0\r\n    Django==2.0.4\r\n    django-allauth==0.35.0\r\n    idna==2.6\r\n    oauthlib==2.0.7\r\n    python3-openid==3.1.0\r\n    ```\r\n\r\nYou will notice that <code>requirements.txt</code> list all the package we installed , version and the  dependencies as well.\r\n <code>pipfile</code> holds the  packages we installed and spare the rest to  <code>pipfile.lock</code>\r\n\r\n**pipfile.lock**\r\n\r\nThis is the file that contains the dependencies based on the packages present in  <code>Pipfile</code>, the specific version of the packages to be used, avoiding the risks of automatically upgrading packages that depend upon each other and breaking your project dependency tree.\r\nIf pipfile.lock wasn't created for some reason, you can lock the currently installed packages by running:\r\n\r\n    $ pipenv lock\r\n\r\n**pipfile sample**\r\n \r\n     [packages]\r\n     django = \"*\"\r\n     django-allauth = \"*\"\r\n\r\n     [requires]\r\n     python_version = \"3.5\"\r\n\r\n**pipfile.lock sample**\r\n\r\n      \"django-allauth\": {\r\n            \"hashes\": [\r\n                \"sha256:7b31526cccd1c46f9f09acf0703068e8a9669337d29eb065f7e8143c2d897339\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.35.0\"\r\n        },\r\n        \"idna\": {\r\n            \"hashes\": [\r\n                \"sha256:2c6a5de3089009e3da7c5dde64a141dbc8551d5b7f6cf4ed7c2568d0cc520a8f\",\r\n               \"sha256:8c7309c718f94b3a625cb648ace320157ad16ff131ae0af362c9f21b80ef6ec4\"\r\n            ],\r\n            \"version\": \"==2.6\"\r\n        },\r\n        \"oauthlib\": {\r\n            \"hashes\": [\r\n                \"sha256:09d438bcac8f004ae348e721e9d8a7792a9e23cd574634e973173344046287f5\",\r\n                \"sha256:909665297635fa11fe9914c146d875f2ed41c8c2d78e21a529dd71c0ba756508\"\r\n            ],\r\n            \"version\": \"==2.0.7\"\r\n        },\r\n        \"python3-openid\": {\r\n            \"hashes\": [\r\n                \"sha256:0086da6b6ef3161cfe50fb1ee5cceaf2cda1700019fda03c2c5c440ca6abe4fa\",\r\n                \"sha256:628d365d687e12da12d02c6691170f4451db28d6d68d050007e4a40065868502\"\r\n            ],\r\n            \"version\": \"==3.1.0\"\r\n        },\r\n#### Conclusion\r\nNow,you know the definition,advantages and how pipenv functions.And the difference between the two magic files pipfile and pipfile.lock",
    "is_active": true,
    "publish": "2018-04-23T09:43:00Z",
    "created": "2019-03-25T02:35:22.499Z",
    "updated": "2019-04-12T17:04:32.768Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      3
    ]
  }
},
{
  "model": "blog.post",
  "pk": 6,
  "fields": {
    "title": "Python Lists",
    "slug": "python-lists",
    "author": 1,
    "image": "blog/2019/04/12/python.png",
    "caption": "Python Lists",
    "credit": "https://achiengcindy.com/",
    "body": "List is the most versatile python data structure and stores an ordered sequence of elements just like your shopping list or to-do-list.In Python, Lists are <code>mutable</code>,meaning that the elements can be altered unlike <code>tuples</code> or even <code>strings</code>.These elements of  a <code>list</code> are called <code>items</code> and can be any data type.\r\n### Creating Lists in Python \r\nCreating lists in python is quite simple, use square brackets [] and separate items in the list with commas.\r\nA list can be empty or contain any number of items with different data types  (integers, float, strings etc.).\r\n\r\n    mylist = [ ]  #empty list\r\n    mylist2 = [1,2]  # list containing 2 items with integers\r\n    mylist3 = [1, 2, 'hello']  # list with 3 items,mixed data types,integers and a string\r\n <srtong>Note</strong> : a  list can also hold another list as an item,these are called <code>nested lists.</code> as show below.\r\n\r\n    mylist4 = [['python','php'],[1,2,3]  # a nested list\r\n\r\n### Accessing items in a list\r\nWe can access items in a list by \r\n\r\n1. **Indexing**.\r\nWe use the <code>index</code> operator [ ].Each item in a list has an assigned index value. It is important to <strong>Note</strong> that the  index starts from 0 in python and **must** be an integer\r\n<div class=\"table-responsive\">\r\n<table class=\"table\">\r\n<thead class=\" thead-light\">\r\n<tr>\r\n<th scope=\"col\">java</th>\r\n<th scope=\"col\">python</th>\r\n<th scope=\"col\">perl</th>\r\n<th scope=\"col\">ruby</th>\r\n<th scope=\"col\">c#</th>\r\n</tr>\r\n</thead><tbody>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>2</td>\r\n<td>3</td>\r\n<td>4</td>\r\n</tr>\r\n</tbody></table></div>\r\n<strong>Note</strong> :The first item of any non-empty list is [0].\r\n\r\n        Languages = ['java', 'python', 'perl', 'ruby', 'c#' ]   # define a list\r\n        print(Languages[0]) # Access the first item of a list at index 0\r\n        # Output:java which is the first item on the list.\r\n\r\n        \r\n2. **Negative Indexing** Python also  supports  negative indexing.The negative indexing  is useful when you want to  get the last item in a list because it start accessing a list  from the end.\r\n<div class=\"table-responsive\">\r\n<table class=\"table\">\r\n<thead class=\" thead-light\">\r\n<tr>\r\n<th scope=\"col\">java</th>\r\n<th scope=\"col\">python</th>\r\n<th scope=\"col\">perl</th>\r\n<th scope=\"col\">ruby</th>\r\n<th scope=\"col\">c#</th>\r\n</tr>\r\n</thead><tbody>\r\n<tr>\r\n<td>-5</td>\r\n<td>-4</td>\r\n<td>-3</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n</tr>\r\n</tbody></table></div>\r\n\r\n><strong>Note</strong>:The last item of any non-empty list is [-1].\r\n\r\n        # define a list \r\n        Languages = ['java', 'python', 'perl' 'ruby','c#' ] \r\n         print(Languages[-1) #Access the last item of a list\r\n        # Output:  C#\r\n\r\n**length of list**\r\n\r\nPython has useful in-built functions that work with the list.We will discuss them later but for now, <code>len()</code> function help us in returning the total number of elements in a list.\r\n\r\n    # define a list\r\n    languages = ['java', 'python' ,'perl', 'ruby', 'c#']\r\n    # print the length of the list\r\n    print(len(languages)) \r\n    # output 5\r\n### Slicing of a List\r\nSlices are good for getting a subset of items in a list.It uses the <code>slicing</code> operator : (colon) to extract part of the sequence.\r\n\r\n    Languages = ['java', 'python',''perl','ruby', 'c#'] # define a list \r\n    # [:3] slicing everything up to but not including index 3\r\n    print(languages[:3])  \r\n    #Outputs: ['java', 'python', 'perl']\r\n\r\n    # define a list \r\n    Languages = ['java', 'python', 'perl','ruby', 'c#' ]\r\n    # [3:] slicing everything from index 3 to the last item\r\n    print(languages[3:])\r\n    #Output: ['ruby', 'c#']\r\n  \r\n\r\n    Languages = ['java', 'python', 'perl','ruby', 'c#']\r\n    #elements from beginning to end\r\n    print(languages[:])\r\n    #Output: ['java', 'python' ''''perl'''',''''ruby'''', ''''c#'''' ]\r\n\r\n    # define a list \r\n    Languages = [''''java'''','python', ''''perl'''',''''ruby'''', ''''c#'''' ]\r\n    # elements from 1st to 3rd\r\n    print(languages[0:3])\r\n    Output # [''''java'''', 'python', ''''perl'''']\r\n\r\n### How to  change/add elements in a list\r\n**list.append(item)**\r\n\r\nThe method <code>list.append(item)</code> will add the <code>item</code> at  the end of a list.\r\n\r\n       # define a list\r\n       languages = [''''java'''','python' ,''''perl'''', ''''ruby'''', ''''c#'''']\r\n       # append c\r\n       languages.append(''''c'''') \r\n       print (languages)\r\n      # Output : [''''java'''', 'python', ''''perl'''', ''''ruby'''', ''''c#'''', ''''c'''']\r\n       \r\n**list.insert(i, item)**\r\n\r\nThis method will insert an item at the ith position in a list, shifting elements to the right.\r\n\r\n    # define a list\r\n    languages = [''''java'''', ''python' ,''''perl'''',''''ruby'''', ''''c#'''']\r\n    # insert c\r\n    languages.insert( 0, ''''php'''') \r\n    print languages \r\n    # Output :  [''''php'''',''''java'''','python', ''''perl'''', ''''ruby'''', ''''c#'''']\r\n\r\n**list.extend(items)**\r\n\r\nThe extend method concatenates lists. Note that you do not call extend with multiple arguments;it takes in a second list as its argument.\r\n\r\n    # define a list\r\n    languages = ['java', 'python','perl', 'ruby', 'C#']\r\n\r\n    Languages2=['c++', 'C'] # define a second list\r\n\r\n    languages.extend(Languages2)\r\n\r\n    print(languages)\r\n\r\n    # Output ['Java', 'Python','Perl', 'Ruby', 'C#'']\r\n\r\n> extend method does not return any value, instead, it modifies the original list by adding the content of the second list\r\n    \r\n\r\n\r\n### Deleting List Elements\r\nUse the **del** keywords to delete an item at a specific index\r\n\r\n+ single item\r\n\r\n         languages = ['Java', 'Python' ,'Perl', 'Ruby', 'C#'] # define a list\r\n         del languages[2] # use del keyword\r\n         print(languages)\r\n         # Output removes perl ['java','python', 'ruby', ''c#']\r\n\r\n+ Multiple items\r\n\r\n         languages = ['java', 'python' ,'perl', 'ruby', 'c#'] # define a list\r\n         del languages[1:3]  #delete Multiple items by slicing\r\n         print(languages)\r\n\r\n         # Output : ['java', 'ruby', 'C#'] \r\n\r\n**list.remove(item)**\r\n\r\nIt will search and  remove <code>only</code> the first occurrence  of an item \r\n\r\n    Languages = ['java', 'python', 'perl','python','ruby', 'c#' ]\r\n    Languages.remove('python')  # the first occurrence of python\r\n    print(languages) # outputs ['java', 'perl', 'python', 'ruby', 'c#']\r\n\r\n   It removes the python after java. Note that the 'python' after Perl is still present\r\n\r\n**list.pop()**\r\n\r\nRemoves and returns the last item of a list\r\n\r\n\r\n    languages = ['java', 'python' ,'perl', 'ruby', 'c#']\r\n\r\n    print(languages.pop()) # print c#\r\n\r\n    print(languages)\r\n    # output ['java', 'python', 'perl',  'ruby']\r\n   \r\n \r\n**list.pop(i)**\r\n\r\nRemoves and returns the ith item of a list\r\n\r\n    Languages = ['java', 'python', 'Perl','ruby', 'C#' ]\r\n    print(languages.pop(1)) # removes  index 1 item\r\n    #  Output returns Python\r\n\r\n\r\n**list.index(item)**\r\n\r\nWhen lists start to get long, it becomes more difficult for us to count out our items to determine at what index position a certain value is located. We can use <code>list.index(item)</code>,  to return the index in the list where that item is located. \r\nIf there is more than one item with value  <code>item</code>, this method will return the first occurrence.\r\n\r\n### Summary of  list methods\r\n\r\n<div class=\"table-responsive\">\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Method Name</th>\r\n       <th>Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>alist.append(item)</td>\r\n      <td>Adds a new item at the end of the list</td>\r\n    </tr>\r\n    <tr>\r\n      <td>alist.insert(i, item)</td>\r\n      <td>Insert item at the ith position shifting other items to the right.</td>\r\n    </tr>\r\n        <tr>\r\n      <td>alist.extend()</td>\r\n      <td>Adds the elements  of a second list to the original list</td>\r\n   </tr>\r\n    <tr>\r\n      <td>del alist[i]</td>\r\n      <td>Deletes the item at the ith position,it can also a range of items by the use of slicing</td>\r\n   </tr>\r\n    <tr>\r\n      <td>alist.remove(item)</td>\r\n      <td>Search and remove the first occurrence of an item,does not return a new list and throws an error if not found</td>\r\n   </tr>\r\n    <tr>\r\n      <td>pop()</td>\r\n      <td>Removes and returns the last item of a list</td>\r\n   </tr>\r\n    <tr>\r\n      <td>pop(i)</td>\r\n      <td>Removes and returns the i item of a list</td>\r\n   </tr>\r\n    <tr>\r\n      <td>alist.index(item)</td>\r\n      <td>Returns the index of first occurrence</td>\r\n   </tr>\r\n    <tr>\r\n      <td>alist.sort()</td>\r\n      <td>sort the items of a list</td>\r\n   </tr>\r\n    <tr>\r\n      <td>alist.reverse()</td>\r\n      <td>Reverses a List</td>\r\n   </tr>\r\n    <tr>\r\n      <td>alist.count(item)</td>\r\n      <td>Returns the  count of occurrence of an item</td>\r\n   </tr>\r\n  </tbody>\r\n</table>\r\n</div>\r\n\r\n### Common List Operations\r\n\r\n**Concatenation**\r\n\r\nConcatenation uses the  <code> + </code> Operator. It Combines lists. \r\n\r\n    # define a list\r\n    languages =[ 'java', 'python' ,'perl', 'ruby', 'c#', ]\r\n    print(languages +([''C++', 'C']))\r\n    # Output:  ['java', 'python' ,'perl', 'ruby', 'c#', 'C++', 'C']\r\n\r\n**Repetition**\r\n\r\n uses the  <code> * </code> Operator. Concatenates a list a repeated number of times\r\n\r\n     mylist = ['strings are  cool'] * 2\r\n     print (mylist)\r\n    # output:  ['strings are  cool', 'strings are  cool']\r\n\r\n**Membership**\r\n\r\nKeyword <code>In</code>  is used to test if an item is  a member of a  list.\r\n\r\n    languages = ['java'', 'python' ,'perl', 'ruby', 'c#']\r\n    if 'python' in languages:\r\n        print('right')\r\n\r\n\r\n\r\n### Iteration\r\n<code>For</code> Loop is used to iterate through each element on a list with the keyword  <code>in</code>.The for loop allows you to to perform an action for every element in the list.\r\n\r\n**illustration 1**\r\n\r\n    languages = ['java', 'python' ,'perl', 'ruby', 'c#']\r\n    for i in languages:\r\n       print(i)\r\nThis will print the all the items in the list one per line as shown below:\r\n    \r\n    java\r\n    python\r\n    perl\r\n    ruby\r\n    c#\r\n**illustration 2**\r\n\r\n    random_sum = [2,7,8,9]\r\n    total = 0\r\n    for i in random_sum:\r\n        total +=i\r\n    print total\r\n\r\nThe above code will print 26, the sum of all the items of the list.\r\nThe for loop requires a variable to hold the items being iterated and the source.\r\n\r\n\r\n<code>While</code> Loop will first check the condition .If the condition is <code>true</code>,it will keep iterating and terminates the loop  once the condition turns <code>false</code>.\r\n\r\n    languages = ['java', 'python' ,'perl'' 'ruby', 'c#']\r\n    i = 0\r\n    while i <len(languages):\r\n        print(languages[i])\r\n        i = i+3\r\nThe above codes will print \r\n\r\n    java\r\n    ruby\r\n\r\n\r\n### Conclusion\r\n Now you know what lists are and how to manipulate them. You may need to learn about list comprehension as well.\r\n <a href=\"https://twitter.com/achiengcindy1\" target=\"_blank\">Follow me on twitter</a>",
    "is_active": true,
    "publish": "2018-04-25T02:37:56Z",
    "created": "2019-03-25T02:47:52.841Z",
    "updated": "2019-04-12T17:05:39.861Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      3
    ]
  }
},
{
  "model": "blog.post",
  "pk": 8,
  "fields": {
    "title": "Laughing Blog  Tutorial  Part 3 - Send Alternative Content Type Emails in Django",
    "slug": "laughing-blog-tutorial-part-3-send-alternative-content-type-emails-django",
    "author": 1,
    "image": "blog/2019/03/25/beverage-coffee-computer-877695.jpg",
    "caption": "django",
    "credit": "https://www.goodfreephotos.com/",
    "body": "In today's tutorial, we extend the newsletter app to include multiple version of email content.\r\n\r\nHtml emails can be formatted well and include pictures, unlike plain text emails. However some email clients (mostly older ones)  cannot read html. Therefore It may be useful to send `plain text` emails a alongside `html email` because we want all our subscribers receiving their emails.\r\n\r\nTo achieve sending multiple email content, we are going to use Django email library called `EmailMultiAlternatives`. For a  much cleaner code, we will create a function.\r\n\r\nWe will also cover django `message framework` to display user notifications Instead of printing  notification to console <a href=\"https://docs.djangoproject.com/en/2.0/ref/contrib/messages/\" target = \"_blank\">see documentation</a>\r\n\r\nLet's get started!\r\n\r\nCreate a new file on newsletter app and name it `emails.py`.\r\n<pre><code class =\"python\">from django.core.mail import EmailMultiAlternatives\r\nfrom django.template.loader import render_to_string\r\ndef send_multiple_email(name, receiver):\r\n    subject = 'Welcome to Laughing Blog Tutorial'\r\n    sender = \"test@achiengcindy.com\"\r\n    text_template = render_to_string(\"newsletter/email-subscribe.txt'',{''name': name})\r\n    html_template = render_to_string(''newsletter/email-subscribe.html'',{''name\": name})\r\n    message = EmailMultiAlternatives(subject,text_template,sender, [receiver])\r\n    message.attach_alternative(html_template, ''''text/html'''')\r\n    message.send()\r\n</code></pre>\r\n\r\nIn the above code, we created a function `send_multiple_email` taking two parameters. Define the subject of the email and sender. Use the render_to_string function and pass the templates for the email body.\r\n\r\nWe can now create the email template\r\n\r\n<strong>newsletter/templates/email-subscribe.html</strong>\r\n\r\n    <h2>Hello {{name}}</h2> \r\n    Welcome to Laughing Blog Newsletter and thank you for signing up. \r\n    You will find the most exciting news about Python, Django, Programming tips and web development tools that will go along way to see you grow your skills\r\n<strong>newsletter/templates/email-subscribe.txt</strong>\r\n<pre><code class =\"python\">Hello {{name}}\r\nWelcome to Laughing Blog  Newsletter and thank you for signing up. \r\nYou will find the most exciting news about Python, Django,Programming tips and web development tools that will go along way to see you grow your skills</code></pre>\r\nNow is a good time to make a few changes in views.py.Change your views to look like this:\r\n### newsletter/views.py\r\n<pre><code class =\"python\">from django.shortcuts import render\r\nfrom .forms import NewsUserForm\r\nfrom .models import NewsUsers\r\nfrom .emails import send_multiple_email\r\ndef newsletter_subscribe(request):\r\n  if request.method == ''''POST'''':\r\n    form = NewsUserForm(request.POST)\r\n    if form.is_valid():\r\n      instance = form.save(commit=False)#we dont want to save just yet\r\n      if NewsUsers.objects.filter(email=instance.email).exists():\r\n        print(''''your email Already exists in our database'''')\r\n      else:\r\n        instance.save()\r\n        print(''''your email has been submitted to our database'''')\r\n        send_multiple_email(instance.name, instance.email)\r\n  else:\r\n    form = NewsUserForm()\r\n  context = {''''form'''':form}\r\n  template = ''''newsletter/subscribe.html''''\r\n  return render(request, template, context)</code></pre>\r\nFirst ,import the function we just created <pre><code>from .emails import send_multiple_email</code></pre>\r\nThen instead of `send_mail` call  `send_multiple_email`\r\n\r\nRun Server and test\r\n### Django messages Framework\r\nEdit your views with the following:\r\nFirst import `messages framework`  <pre><code>from django.contrib import messages </code></pre>\r\nand next replace these line of codes\r\n<pre><code>print(''''your email Already exists in our database'''') \r\nprint(''''your email has been submitted to our database'''') </code></pre>\r\n with these lines respectively <pre><code>messages.warning(request, ''''your Email Already exists in our database'''') \r\n messages.success(request, ''''your Email has been submitted to our database'''')</code></pre>\r\n\r\nTo display messages edit subscription template to look like this:\r\n\r\n    <ul class=\"messages\">\r\n    {% for message in messages %}\r\n    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif    %}>{{ message }}</li>\r\n    {% endfor %}\r\n    </ul>\r\n    {% else %}\r\n    <form action=\"{% url ''''newsletter:subscribe'''' %}\" method=\"post\">\r\n\t{% csrf_token %}\r\n\t{{ form.as_p }}\r\n\t<button type=\"submit\">Submit</button>\r\n    </form>\r\n    {% endif %}\r\n### Conclusion\r\nWe are now able to send alternative emails and have a more readable code.The source code for this tutorial is available on  <a target=\"_blank\" href=\"https://github.com/achiengcindy/laughing_blog\"> Github </a>.\r\n\r\n<a href=\"https://twitter.com/achiengcindyKE\" target=\"_blank\">Connect with me on Twitter</a>",
    "is_active": true,
    "publish": "2018-06-05T10:25:07Z",
    "created": "2019-03-25T08:15:38.038Z",
    "updated": "2019-03-25T08:15:38.038Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": []
  }
},
{
  "model": "blog.post",
  "pk": 9,
  "fields": {
    "title": "Laughing Blog Tutorial part 4 - Django Authentication System",
    "slug": "laughing-blog-tutorial-part-4-django-authentication-system",
    "author": 1,
    "image": "blog/2019/04/13/nicholascool.jpg",
    "caption": "beautiful image of a mountain",
    "credit": "photo by nicolas cool",
    "body": "This is the fourth part of the <a href=\"https://achiengcindy.com/permalink/3/\" target=\"_blank\"> laughing Blog Series</a> and In this article we will talk about Django authentication system.\r\n### Enabling Authentication\r\nDjango has a powerful inbuilt authentication system that handles both `authentication` and `authorization` but both commonly just termed as `authentication` \r\n\r\nThe authentication is bundled in the `django.contrib.auth` and also  the  `django.contrib.contenttypes`  to support authorization both  in settings.INSTALLED_APPs. \r\n\r\n<pre><code class=\"python\">INSTALLED_APPS = [\r\n''django.contrib.auth'',\r\n''django.contrib.contenttypes'',\r\n]</code></pre>\r\n\r\nIn addition to the installed apps, Django also has two `middleware classes` found in the setting.MIDDLEWARE_CLASSES  of your project.\r\n`AuthenticationMiddleware ` which associates users with creators\r\n`SessionMiddleware` handles the current session across requests\r\nusing sessions\r\n\r\nDjango authentication has the capability to handle:\r\n\r\n1. Authentication : login ,logout \r\n>Note: What is the difference between authentication and  login:\r\nauthenticate verify  user credentials and returns a user object\r\nif correct; login  sets the user in the current session\r\n\r\n2. Password Management: Changes password and allow for resets as well\r\n\r\n### What is the difference between authentication and authorization?\r\nAuthentication: verify user credentials such as username against password to ascertain the user is who they say they are.\r\n\r\nAuthorization determines  that the authenticated user is authorized to perform some given operation (usually by checking against granted permissions)\r\n\r\n<div class= \"achiengbytes\">\r\n<h5>Authorization vs Authentication</h5>\r\nAuthentication: verify user credentials such as username against password to ascertain the user is who they say they are.\r\n\r\nAuthorization determines  that the authenticated user is authorized to perform some given operation (usually by checking against granted permissions)\r\n</div>\r\n\r\n\r\n### Users\r\nThe authentication system comprises of Users, Permissions, Groups, Forms and view tools for logging in users, or restricting content.\r\n\r\nThe `User object`  sits at the heart of the Django authentication system representing the people who interact with the application. The user object is used to grant permission, register user profiles and associated content with creators.  \r\nThe primary attributes are:`username`,`password`, `email`,`First name` and `last name`\r\n\r\nWith that background, let us get started\r\n\r\nCreate an app called accounts <pre><code class=\"python\">python manage.py startapp accounts</code></pre>.\r\nNext, we have to install it in `settings. Installed-apps` \r\n   <pre><code class=\"python\">INSTALLED_APPS = [\r\n...\r\n''accounts'',\r\n]</code></pre>\r\n### Using Authentication Views\r\nTo use all the views Django authentication  has to offer,simply define the  urls in the main urls.py as shown :\r\n   <pre><code class=\"python\">path(''accounts/'', include(''django.contrib.auth.urls'')),</code></pre>\r\n\r\nIf you run the server and navigate to  http://127.0.0.1:8000/accounts/ on the browser, you will see all the views associated with accounts.\r\n\r\n<pre><code class=\"python\">\r\naccounts/ login/ [name=''login'']\r\naccounts/ logout/ [name=''logout'']\r\naccounts/ password_change/ [name=''password_change'']\r\naccounts/ password_change/done/ [name=''password_change_done'']\r\naccounts/ password_reset/ [name=''password_reset'']\r\naccounts/ password_reset/done/ [name=''password_reset_done'']\r\naccounts/ reset/<uidb64>/<token>/ [name=''password_reset_confirm'']\r\naccounts/ reset/done/ [name=''password_reset_complete'']\r\n</code></pre>\r\n\r\nAt this point if you try to navigate to any of the views say http://127.0.0.1:8000/account/login/, it throws template doesn't exist error. \r\n\r\n![](https://i.imgur.com/OTdpUmo.png)\r\n\r\nTo use the views, we have to create the templates.\r\n### Creating Templates Directory\r\nBy default, Django will look for templates in a folder called `registration`.\r\nSo, inside accounts app,create a new directory and name it templates, inside templates create another directory and call it registration <pre><code>cd accounts && mkdir templates\r\ncd templates && mkdir registration</code></pre>\r\n\r\nWe will create all the templates related to Django authentication Inside registration,\r\n\r\n#### Creating Login template\r\nCreate the `login.html` file add a basic form as shown below\r\n\r\n    {% extends \"base.html\" %}\r\n    {% block title %}Log-in{% endblock %}\r\n    {% block content %}\r\n    <h2>Log-in</h2>\r\n    Please, use the following form to log-in. \r\n    <div class=\"login-form\">\r\n    <form  action=\"{% url ''login'' %}\"  method=\"post\">method=\"post\">\r\n    {{ form.as_p }}\r\n    {% csrf_token %}\r\n    <input type=\"submit\" value=\"Log-in\">\r\n    </form>\r\n    </div>\r\nTo make sure the login template works fine,Navigate to login url on your browser http://127.0.0.1:8000/account/login/`   and this time you should see the login form\r\n\r\n![](https://i.imgur.com/XrnRsDF.png)\r\n\r\nAt this point, we can only log in existing users and we have one already!. \r\n\r\nLogin using  the `superuser`credentials you created in <a href=\"https://achiengcindy.com/2018/04/07/laughing-blog-part-2-handling-django-forms/\" target=\"_blank\"> Handling Forms</a>\r\n\r\nAnd yes our login works well!. \r\n\r\nHowever, After a successful login, Django redirects to profile.\r\n\r\n![](https://i.imgur.com/1WJt2je.png)\r\n\r\nCan we really blame Django, we have not told it where to redirect the authenticated users.\r\n\r\nLet's direct them to the home  page by adding this to `settings.py`\r\n<pre><code class=\"python\"># settings.py\r\nLOGIN_REDIRECT_URL =  ''/''</code></pre>\r\n#### Creating Logout Template\r\nNow that we can login in users successfully, its time to log them out!\r\nInside the registration directory, Create another file and call it `logged_out.html`\r\n\r\n    {% block title %}Logout{% endblock %}\r\n    {% block content %}\r\n    <p>You have sucessfully logged out</p>\r\n    <p><a  href=\"{% url \"login\" %}\">Click here to Login again</a></p>\r\n    {% endblock %}\r\n\r\nWhen you go to log out  url: http://127.0.0.1:8000/accounts/logout/, you should see\r\n\r\n![](https://i.imgur.com/3q1K2DL.png)\r\n\r\nWait, didn''t we just create a logout template? \r\n>Hint: \r\n>1. The logout template must be named `logged_out.html`\r\n>2.   In `settings.py.INSTALLED_APPS` make sure `''django.contrib.auth'',` comes after the app  <pre><code class=\"python\">INSTALLED_APPS = [\r\n''accounts',\r\n'django.contrib.admin',\r\n]</code></pre>\r\n\r\nNow if you visit the logout url, you should be able to see the template we created and not Django admin logout page\r\n\r\n![](https://i.imgur.com/yo3jDXQ.png)\r\n\r\n### Conclusion\r\nWe can successfully login in and log out already existing users. In the next tutorial, we will learn how to register new users.\r\n\r\nThe source code for this tutorial is available on  <a target=\"_blank\" href=\"https://github.com/achiengcindy/laughing_blog\"> Github </a>.\r\n\r\n<a href=\"https://twitter.com/achiengcindyKe\" target=\"_blank\">Connect with me on Twitter</a>'\r\n```",
    "is_active": true,
    "publish": "2018-06-23T10:25:21Z",
    "created": "2019-03-25T08:26:01.006Z",
    "updated": "2019-04-13T04:23:20.096Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      2
    ]
  }
},
{
  "model": "blog.post",
  "pk": 10,
  "fields": {
    "title": "Understanding The Service Worker LifeCycle",
    "slug": "understanding-service-worker-lifecycle",
    "author": 1,
    "image": "blog/2019/04/13/service_worker.jpeg",
    "caption": "an image showing service worker life cycle",
    "credit": "https://dev.to/",
    "body": "The desired user experience on the web is to access information without interruptions. Unfortunately, even with high-speed connectivity we still experience some delays.\r\n\r\nLet me explain briefly, to get the information we need on our screen we send requests over the network and wait for that response. But what if, just what if the destination server is busy, or there is a misconfigured proxy somewhere, or you can't access the internet for whatever reason, It could be anything really, and we have to wait for a very long time for the response?\r\n\r\nThis can be frustrating for most users. But there is a solution, building apps that work great regardless of network availability apps having the native app feel.\r\n### How can we achieve offline experience on the web?\r\nTo achieve offline experience on the web, we need to take care of two things.\r\n\r\n 1. Caching. \r\nThe browser stores static assets such as HTML,CSS, images e.t.c such that when needed next, they are fetched from the browser cache.Big deal when the network fails.\r\n 2. Storing data on the client side\r\n<a href=\"https://www.html5rocks.com/en/features/storage\" target=''_blank''>Html 5 </a> came bearing good news with offline technologies such as Web Storage, indexed databases among others enabling you store data locally on the users device.\r\n\r\n**A little history on offline web browsing**\r\n\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\" target=\"_target\"> Application Cache</a> (Warning: It is being deprecated)  achieved offline browsing on the web. Developers specified the set of resources for the browser to cache and enjoy offline browsing. It had many benefits including Improved speed by caching resources  <code>locally</code>( no need for network trips),  and reduced server load (the browser only downloads resources that have changed from the server.)\r\n\r\n But did it deliver its promise effectively? Yes and No. Yes because it did allow for offline browsing.No because Application Cache didn't express clear intent in the manifest and was easily caught by unexpected behavior  read <a href=\"http://alistapart.com/article/application-cache-is-a-douchebag\" target=\"_blank\">API is A douchbag</a>\r\n\r\n`Service Worker`, the relatively new kid was born.\r\n\r\n### Service workers\r\nService worker is a javascript file that the browser runs in the background, acting as a  proxy between you and the web pages. It is a type of a <a href=\"https://html.spec.whatwg.org/multipage/workers.html\">web worker</a> meaning the script run on a separate thread from the web pages and UI enabling them to work without an active browser session. It has no access to DOM or web pages, instead Communicates with the pages it controls through <code>post message</code>. \r\n\r\nService worker allows you to intercept requests and modify the response. As a developer, you have complete control on how to handle requests. Based on network availability, you could send the request to the network,  skip the network and get the response from a cache, create a custom response, or even a combination of both.\r\n\r\nThis control over your app behavior is the reason service workers run only on <code>https</code>. Service worker lives longer than the web pages it control and susceptible to manipulation. Your guess should be as good as mine by now, to avoid man in the middle attacks. There is an exception to this rule however, during development on localhost.\r\n### Benefits of Service worker\r\n1. The intended use is to create offline first apps. \r\n\r\n   + Offline first apps offer great user experience for everyone regardless of connectivity. Content is delivered first before sending requests to the network.\r\n   + Let me say something about <code>online first</code>.As the name suggests we have to fetch content from the network then maybe fallback to cache or display an error page. This approach is perfect for cases of good connectivity and works for offline as well. But it has one major fault: Terrible for Lie-fi(slow connectivity).Remember we have to wait for the network response.\r\n 2.  Great benefits online when experiencing slow connection. The performance speed is increased by reducing network requests for certain assets.\r\n3. Users get a customized offline fallback experience because service worker has the ability to  Intercept network requests and handle response based on network availability.\r\n\r\n### Registering service worker and scope\r\nTo use a service worker script,  you tell the browser where to find it by registering the script.Register the script with the sample code below:\r\n<pre><code class =''javascript''>navigator.serviceWorker.register(''/sw.js'').then(function() {\r\n    console.log(''Registration worked!'');\r\n}).catch(function() {\r\n    console.log(''Registration failed!'');\r\n});\r\n};</code></pre>\r\nA Service Worker returns a promise.If the  Promise resolves,the registration is successful otherwise the registration of the new service worker failed.\r\n\r\n> The browser won't re-register an existing service worker on call, but return a promise for existing registration\r\n\r\n**Browser Support**\r\n\r\nSome browsers don''t support service workers yet so to be safe, perform a feature check  by wrapping the service worker in an if statement.\r\n<pre><code class = ''javascript''>(!navigator.serviceWorker) return;\r\nnavigator.serviceWorker.register(''/sw.js'').then(function() {\r\n    console.log(''Registration worked!'');\r\n}).catch(function() {\r\n    console.log(''Registration failed!'');\r\n});\r\n};</code></pre>\r\n\r\nSee is <a href=\"https://jakearchibald.github.io/isserviceworkerready/\"  target=\"_blank\"> Worker Ready</a> for browser support\r\n\r\n**Scope** \r\n\r\nThe scope defines the pages that a service worker controls.\r\nFor example:\r\n `scope: ''/src/''`  will control  deeper Url and wont control shallow Url.\r\n\r\n`/src/home/` will be controlled since its a deeper url\r\n\r\n`/src` won't be controlled since it is considered a shallow url (no trailing slash)\r\n\r\n`/public/` will not be controlled because it is unrelated url\r\n\r\nThe default scope is defined by the location of a service worker script. This means if you register a service worker at the root folder, it is not necessary to define its scope because it controls all the pages.\r\n<pre><code class = ''javascript''>navigator.serviceworker.register(''/sw.js'', {\r\n    scope: ''/''\r\n});</code></pre>\r\n    \r\n### Service worker lifecycle\r\n**Installation**\r\n\r\nOnce the browser has registered the service worker, it downloads the script in the background and then attempts installation. An `install event` is fired if the browser considers the service worker to be  ''new ''. The browser considers the service worker new if:\r\n\r\n  1. The Service Worker  has never been registered before and its the browser first encounter with the script\r\n  2. The browser detect even a   byte difference between the previously installed and the  new  service worker\r\n  \r\nIn the case where a previous version of service worker is already running,  it will still continue to serve pages. The browser won't let the new service worker take control until the installation phase is complete. Instead, the new service worker becomes the next version in  **waiting**.To determine its **success**, we pass a **promise** to <code>event.waitUntill</code> method to delay the installation phase to ensure that only one version of service worker script is running at any given time.\r\n\r\nIf the promise resolves, the browser knows the Installation has completed otherwise it has failed and can be discarded.\r\nNo cause of alarm because even if the promise fails to resolve, the previous version of the service worker is still working.\r\n\r\nThis is a perfect opportunity to fetch for resources that make the application shell from the network and cache them. Ideal for the static resources that our site depends on such as Html, CSS, Fonts, Javascript, etc.\r\n\r\n**Activation**\r\n\r\nOnce a service worker has successfully installed, it enters the activation stage. However, service worker cannot control pages that were **already** loaded because of the simple fact that Service Worker script can only control pages as they load.\r\n\r\nIn the case of the browser first encounter with a Service Worker, the service worker becomes active upon successfully completing the installation phase and will be able to control new page loads. To control the already loaded pages, a reload is required.\r\n\r\nIn the case where the service worker is updated, (Not the browser first-time interaction with a service worker ), for the newly installed service worker to take control, close all the pages loaded with the previous service worker.\r\n\r\nOnce all pages using the old (previously installed) service worker are gone, the new one activates, firing an activate event.\r\n  >service worker  can take control of of uncontrolled pages by calling <code>clients.claim()</code> within your service worker once its activated\r\n  <pre><code class=''javascript''>self.addEventListener(''activate'', function(event){\r\n  });</code></pre>\r\n\r\nSince the previous version is out of the way, it is a perfect time to delete the old cache so that all users can have the current version of our site.\r\n\r\n### gotcha\r\nWe change files all the time! When we make changes in our file say a css file, this can become a ''problem''.A  page reload won't help much because we still using the cache with the old css.\r\n\r\nDespite the changes in our css file, our site remains the same. Meaning, to see the changes, we make a change to the service worker script, you can simply add  a comment, remember its just a byte difference and the browser will consider it as ''new''\r\n\r\n### Notes\r\n\r\n1. Service workers do not provide cached data for offline use only, but also effective during slow connectivity online.\r\n2. Service workers are programmable JavaScript \"servants/workers\"\r\n3. They can not access DOM directly, instead, communicate with the pages it controls through responding to messages via <code>postmessage</code>.\r\n4. Require sites to be served over https. This is important because they intercept the request and can modify response, to avoid hijacking by third parties\r\n5. Stays idle when not in use, restarted when next needed\r\n6. Make extensive use of promises\r\n\r\n### Further reading\r\n1. <a href=\"https://developers.google.com/web/ilt/pwa/introduction-to-service-worker\">Introduction to service workes</a>\r\n2. <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle\"> Jake Archibald</a>\r\n\r\n### Conclusion\r\nThank you for reading, hope you are ready to give users an amazing experience both online and offline. Tell me if you find this article useful or if I missed something, please let me know by commenting below.\r\n\r\n<a href=\"https://twitter.com/achiengcindyKE\"> Connect with me on twitter</a>",
    "is_active": true,
    "publish": "2018-05-11T17:38:32Z",
    "created": "2019-03-25T08:43:11.304Z",
    "updated": "2019-04-13T03:48:03.813Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      4
    ]
  }
},
{
  "model": "blog.post",
  "pk": 11,
  "fields": {
    "title": "Laughing  Blog Tutorial part 5 :  Django User Registration",
    "slug": "laughing-blog-tutorial-part-5-django-user-registration",
    "author": 1,
    "image": "blog/2019/03/25/adventure-1807524_1920_XA6VWoK.jpg",
    "caption": "django",
    "credit": "https://dev.to/",
    "body": "In the Previous article  <a href =\" https://achiengcindy.com/permalink/9/\" target=\"_blank\" >Django Authentication Framework</a> \r\n we used Django built-in views to `login` already existing users.\r\n\r\nIn this article, we will learn how to register users using Django built-in form `UserCreationForm` However, we will create our own registration view as Django doesn't provide views for registering users.\r\n\r\n`UserCreationForm`  inherits from `ModelForm` class and come with three fields `username`, `password1` and a  `password2` for confirmation. \r\n\r\nin the `accounts app` we will create a file  `forms.py`\r\n<pre><code class=\"python\">from django import forms\r\nfrom django.contrib.auth.forms import UserCreationForm\r\nfrom django.contrib.auth.models import User\r\nclass SignupForm(UserCreationForm):\r\n\temail = forms.EmailField(max_length=200, help_text=''Required'')\r\n\tclass Meta:\r\n\t\tmodel = User\r\n\t\tfields = (''username'', ''email'', ''password1'', ''password2'')\r\n\tdef clean_email(self):\r\n\t\temail = self.cleaned_data[''email'']\r\n\t\tif User.objects.filter(email=email).exists():\r\n\t\t\traise forms.ValidationError(''Please use another Email,that is already taken'')\r\n\t\treturn email</code></pre>\r\n\r\nTo use the `UserCreationForm` we  need to import it  from `from django.contrib.auth.forms ` and also import the `User` object.\r\n\r\nDjango authentication framework  by default uses `username`  to authenticate users but in the above code we define the email field and set it  to `required` \r\n\r\nWe will need it later when we will ask users  to activate their accounts after  registration by sending tokens to their email address,\r\n\r\nWe have to clean our email field to ensure that it is unique.The function `clean_email` checks if the email already exists and throw an error \r\nWe then create a function to clean email field and  check if the email already  exists and throws an error `''Please use another Email,that is already taken''`\r\n### Creating the User Creation  View\r\n<pre><code class=\"python\">from django.shortcuts import render , redirect\r\nfrom .forms import SignupForm\r\ndef register(request):\r\n  if request.method == ''POST'':\r\n    userform = SignupForm(request.POST)\r\n    if userform.is_valid():\r\n    \tuserform.save()\r\n    \treturn redirect(''login'')\r\n  else:\r\n    userform = SignupForm()\r\n  context = {''userform'':userform}\r\n  template = \"accounts/signup.html\"\r\n  return render(request, template, context)</code></pre>\r\nTo use the `UserCreationForm` we have to import it from `forms.py`\r\nWe check it it''s a `POST` request else we return the SignUpForm.\r\nIf it is a` POST`  request, we instantiate a form instance and populate it with data from the request, check if the form is valid and save.\r\nIf the user is created successfully, we redirect them to  the `login` view\r\n\r\n**accounts/urls.py**\r\n\r\n<pre><code class=\"python\">from django.urls import path\r\nfrom .views import register \r\nurlpatterns = [\r\n    path(''register/'', register, name=''register'')\r\n]</code></pre>\r\n\r\n**laughing_blog/urls.py**\r\n\r\n<pre><code class=\"python\">path(''accounts/'', include(''accounts.urls'')),</code></pre>\r\n### Creating signup template\r\naccounts/templates/accounts create a file `signup.html`\r\n\r\n    {% extends \"base.html\" %}\r\n    {% block title %}Create an account{% endblock %}\r\n    {% block content %}\r\n    <h2>Create an account</h2>\r\n    <form action=\".\" method=\"post\">{% csrf_token %}\r\n    {{ userform.as_p }}\r\n    <input type=\"submit\" name=\"\" value=\"Save changes\">\r\n    </form>\t\r\n    {% endblock %}\r\n\r\nIts time to visit  the register form.On your browser navigate to `http://127.0.0.1:8000/accounts/register/` and if everything works as it should,this ugly form should appear!\r\n\r\n![](https://i.imgur.com/YW6RL4O.png)\r\n\r\n### Conclusion\r\nThis is part 5  of the <a href = \"https://achiengcindy.com/permalink/3/\" target=\"_blank\">laughing blog</a>   tutorial series, so if you miss on anything, please refer to the previous articles.\r\n\r\nWe can now add create users and  I hope you enjoyed this simple registration\r\n\r\n<div class= \"achiengbytes\">\r\n<h5>Authorization vs Authentication</h5>\r\nAuthentication: verify user credentials such as username against password to ascertain the user is who they say they are.\r\n\r\nAuthorization determines  that the authenticated user is authorized to perform some given operation (usually by checking against granted permissions)\r\n</div>\r\n\r\nThe code can be found on  github <a href = \"https://github.com/achiengcindy/laughing_blog/\" target=\"_blank\">github</a>  and to  view this article code, go to this   <a href=\"https://github.com/achiengcindy/laughing_blog/commit/da6f97f9cc8b1864c5e944718b0062f788f6fa60\" target=\"_blank\" >commit</a>",
    "is_active": true,
    "publish": "2018-07-06T03:24:04Z",
    "created": "2019-03-25T08:47:27.175Z",
    "updated": "2019-03-26T16:17:27.586Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": []
  }
},
{
  "model": "blog.post",
  "pk": 12,
  "fields": {
    "title": "My journey so far as a Software Developer",
    "slug": "my-journey-so-far-software-developer",
    "author": 1,
    "image": "blog/2019/04/12/journey.jpg",
    "caption": "image of a person on top of a mountain helping another one up with a sunset background",
    "credit": "https://www.pexels.com",
    "body": "This is a story about resilience, determination, and passion. It started way back when I missed all my uni choices. I  related more with math and wanted to study statistic but I missed the chance. Being a beneficiary of the government sponsorship program, most courses are highly competitive and by the time I went for my 3rd and final revision, I felt like nothing was there for me. But, I had to make a choice. I was a science kind of girl so I picked whatever was left with  \" science\", in my case that was Applied Computer Science.\r\n\r\nTo be totally honest, I didn\u2019t have a clue what it was all about. Obviously, it had to do with computers and mathematics, maybe?. Eventually , I got admitted to study Applied Computer Science in <a href=\"https://www.kisiiuniversity.ac.ke/\" target=\"_blank\">kisii Uiversity</a>  in August the same year.\r\n\r\nMy first lecture on campus was an introduction to Computer Programming- JAVA. At the time I had a mini laptop which I had bought with my HELB money(Higher Education Loans Board). I still remember vividly when my favorite lecturer Oops! not sure if he will appreciate me mentioning his name, but yes  <a href=\"https://ke.linkedin.com/in/kengerekibwage\" target=\"_blank\">kengere kibwage</a> saying, \"Give that toy to your baby sister\u201d, and continued talking about common java compilers. (Sir, you shaped my skills) \r\n\r\n\u201cwhat is a compiler?\u201d, I could ask myself but kept silent to mask my ignorance. The class seemed just fine.I felt stupid and my mind told me to quit.you are not creative enough, you don\u2019t get it like the rest.I wish I asked though.\r\n\r\nLong story short, I managed to graduate and the impostor syndrome still stuck with me. In my mind, programming was for a certain kind of people, way out of this world.\r\n \r\nIt was not until I joined [Andela bootcamp](https://andela.com/) that my dimensions changed. It was the all-female boot camp edition, in that room was 40 intelligent women including ''myself''.I was inspired. The practicality and relating software to solving real-life problems motivated me to go on. I saw a future in solving problems through writing codes, It was not easy but I knew that I wanted to be programmer more than ever that I did quit my job as an IT technician and embarked on this awesome journey to becoming a  world-class developer as Andeleans like to say it.\r\n\r\nI didn't make it to the end of the boot camp, but something changed. I came out fierce and I was willing to put in the time and effort and nothing could stop me. I was reborn and left behind the misconceptions. <a href=\"https://achiengcindy.com/blog/\"  target=\"_blank\">Cindy Achieng Blog</a> was born to document my journey and inspire anyone who wanted to code and didn't know where to start.\r\n\r\nI applied for the Google Africa Challenge Scholarship in partnership with   <a href=\"Udacity https://www.udacity.com/\" target=\"_blank\">Udacity</a> and <a href=\"https://andela.com/alcwithgoogle/\" target=\"_blank\">ALC 3.0</a> and was lucky to be  enrolled on Intermediate  mobile-web track. The first phase of the scholarship is a 3-month challenge course and only 500 scholars get selected for a nanodegree based on many factors such as participation, completing tasks on time, helping peers among others.\r\n\r\nAndela Learning community brought together all learners across Africa, interacting with each offer, offering emotional support and collaborating (it's what good programmers do).\r\n\r\nIt has been an intriguing journey learning from some of the best developers including <a href=\"https://twitter.com/jaffathecake\" target=\"_blank\">jakearchibald</a>.Knowledge gained during the 3-month challenge course is immeasurable. Have you ever imagined having offline first web apps? Saying goodbye to this:\r\n\r\n![](https://i.imgur.com/JGRhuL0.jpg)\r\n\r\n\r\nIf you enjoy the game like I do, on the plus side you will still get to play it when you want to.Thanks to the  web Technologies <a href=\"https://achiengcindy.com/permalink/10/\" target=\"_blank\">Service Worker </a>, Cache API ,Indexed DB and  fetch API.\r\n\r\nThe climax was 7DaysofCodeChallenge to create a <a href=\"https://achiengcindy.github.io/currency_converter/main.html\"  target=\"_blank\">currency converter app</a> that can work both online and offline.\r\n\r\nToday, the 11th  of July 2018, I am lucky again to be among the few 500 scholars to be offered a nanodegree on Udacity and I can't keep quiet.\r\n\r\nThank you to everyone who supported me. <a href=\"https://ke.linkedin.com/in/mckabue\"  target=\"_blank\">mckabue</a> and all my peers from the scholarship, andela, udacity and googleafrica.\r\nAsanteni Sana!\r\n\r\n**More About ALC**\r\n\r\n1. <a href=\"https://medium.com/@chimdi2000/andela-and-googles-android-learning-community-alc-the-case-for-investing-in-communities-of-35cda2b276b5\">ALC</a>",
    "is_active": true,
    "publish": "2018-07-11T09:59:39Z",
    "created": "2019-03-25T08:58:57.548Z",
    "updated": "2019-04-13T03:33:20.368Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      6
    ]
  }
},
{
  "model": "blog.post",
  "pk": 13,
  "fields": {
    "title": "Responsive web design -media queries",
    "slug": "responsive-web-design-media-queries",
    "author": 1,
    "image": "blog/2019/04/13/beautiful.jpg",
    "caption": "mac book and office lamp on a beautiful brown wooden desk by Toni Cuenca from Pexels",
    "credit": "https://www.pexels.com/photo/apple-device-camera-lens-computer-desk-577559/ by Toni Cuenca",
    "body": "With so many devices available in the market today, It goes without saying that designers should think responsiveness. Building sites that can be accessed across devices cannot be stressed enough.\r\nIt is a good practice to build mobile-first responsive sites then adjust for bigger screens.\r\n\r\n### Viewport\r\nViewport defines the area of the screen that the  browser can render content to.To achieve responsiveness, we include meta viewport in the head section of the document  `<meta name=\"viewport\"  content=\"width=device-width, initial-scale=1\">`\r\nBreakdown of the \r\n\r\n1. The `meta name=\"viewport\"`  instructs the browser how to controls the width and scaling.\r\n2. The `width = device-width` sets the width of the page to follow the screen-width of the device\r\n3. include `initial-scale = 1` to establish the 1:1 relationship between CSS pixels and device independent pixels. \r\n\r\n### Media queries\r\nMedia Queries are definitely buddies when talking responsiveness. They enable designers to define breakpoints: The point at which the site adapts according to the best possible layout. Media Queries can be used to check the width and height of the viewport, device width and height, resolution and screen orientation.\r\n\r\n\r\n### Ways to apply media queries\r\n1. Linked css\r\nA separate stylesheet is ideal if there is a need to completely separate different styles for different devices such as desktop, laptop.\r\nLinked stylesheet makes many but small http requests.\r\nThey are referenced as  <pre><code class=\"css\"><link rel =\"stylesheet\" media= screen and (min-width :500px) href=\"main.css\" /></code></pre>\r\n2. Embedded with an @import tag.\r\n@import rule is expensive and should be avoided for performance reasons.It can prevent stylesheets from being downloaded concurrently negatively impacting performance.However, the rule can be beneficial if a stylesheet depends on another.<pre><code class=\"css\">import url(\"mail.css\") only screen and (min-width:500px); </code></pre>\r\nThis rule should be used sparingly.\r\n3. Embeded with @media tag\r\n### Breakpoints\r\nMany different devices will be available in the market over a period of time so Avoid  defining breakpoints based on devices for obvious reasons.Who knows which new device will be in the market tomorrow.\r\nIt is good practice to find breakpoints using your content as a guide. Furthermore, the content is the important stuff and the design should display the content right?\r\n\r\n### Width vs device-width\r\n\r\nUnderstanding the difference between media queries based on width and device-width is vital.width is the size of the browser window while device-width is the device actual screen size. In other words, the screen resolution of the device\r\n\r\nIt is not a good idea to use device-width because:\r\n\r\n1. They don't always match the layout viewport.C a prevent content from adapting on desktops or other devices that allow the window to be resized and this is because the query is based on the actual device size and not the browser window.\r\n2. Some browsers such as Legacy Android browser may report the wrong value\r\n\r\n### My thoughts on good design Practices.\r\n1. Use @import rule sparingly, it can prevent your stylesheets from downloading concurrently\r\n2. Device-Width dot always match the layout viewport\r\n3. Don't base your breakpoints on  device size  instead prioritize content\r\n4. @media rule makes few big http requests",
    "is_active": true,
    "publish": "2018-07-30T12:43:51Z",
    "created": "2019-03-25T09:08:08.225Z",
    "updated": "2019-04-13T03:56:11.641Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      4
    ]
  }
},
{
  "model": "blog.post",
  "pk": 14,
  "fields": {
    "title": "Cache API",
    "slug": "cache-api",
    "author": 1,
    "image": "",
    "caption": "ww.pexels",
    "credit": "https://www.pexels.com",
    "body": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Cache\" target=\"_blank\">Cache API</a> provides a storage mechanism for request|response object pairs from any secure origin.Both on our origin and other secure origins as well.It was created to enable <a href=\"https://achiengcindy.com/permalink/10/\" target=\"_blank\">Service Worker</a> have control over caching and respond appropriately based on network availability.However, Cache API can also be use for general storage mechanisms and not limited to service worker.\r\n\r\nSince it''s an experimental technology,it may not be supported by old browsers.It is best to perform a check\r\n\r\n<pre><code class=\"javascript\">if (''caches'' in window) {\r\n  //ok\r\n}</code></pre>\r\n\r\n### Creating and Opening Caches\r\ncache API gives `caches object` in the global\r\n\r\n**caches.open( )**\r\n\r\nTo open a cache call the caches.open(cacheName) method.Pass a single parameter,the name of the cache.\r\n\r\n<pre><code class=\"javascript\">caches.open(''static-cache'').then( cache => {\r\n// do something with cache...\r\n});</code></pre>\r\ncache is named `static-cache`.You give yours any name.The method will create a cache if it doesn''t exist already.\r\n\r\nResolves to a promise with a `cache object`\r\n\r\n### Adding Items to Cache\r\nThere are three methods that can to add items to our cache `Add()` , `addAll()`, `put()` methods.\r\n\r\n**cache.add(request )**\r\n\r\nThis method accepts a request or a single URL, retrieves it, and adds the resulting request-response pair into the  cache.\r\n\r\n<pre><code class=\"javascript\">caches.open(''static-cache'').then(cache => {\r\n    return cache.add(''/foo'');\r\n})</code></pre>\r\n\r\n**cache.addAll(requests)**\r\n\r\nThis method is the same as add() except that it take an array of URLs or requests,fetches them and put the request-response pair in cache.It uses fetch under the hood,requests will go over the browser cache.\r\n\r\n<pre><code class=\"javascript\">caches.open(''static-cache'').then(cache => {\r\n    return cache.addAll(\r\n        [\r\n            ''/css/bootstrap.css'',\r\n            ''/css/main.css'',\r\n            ''/js/bootstrap.min.js'',\r\n            ''/js/jquery.min.js'',\r\n        ]\r\n    );\r\n})</code></pre>\r\nIt is an atomic operation i.e if any of the resources fail to be added to the cache, the whole operation fails\r\n\r\n**cache.put(request, response)**\r\n\r\nPut() take in both  request and its  response, and then add it to the cache.\r\n<pre><code class=\"javascript\">const url = ''/foo''\r\nfetch(url).then(res => {\r\n    return caches.open(''static-cache'').then(cache => {\r\n        return cache.put(url, res)\r\n    })\r\n})</code></pre>\r\n\r\n### Retrieving Data from cache\r\n`match()` and `matchAll()` methods are used to access data in cache.These methods allow to search for content in the cache\r\n\r\n  \r\n**cache.match(request, options)**\r\n\r\nThis method returns a Promise that resolves to the response object associated with the first matching request in the cache or caches. It returns undefined if no match is found. The first parameter is the request, and the second is an optional list of options to refine the search\r\n\r\n**caches.matchAll(request, options)**\r\n\r\nThis method is the same as `cache.match()` except that it returns all of the matching responses from the cache instead of just the first. For example, if your app has cached some images contained in an image folder, we could return all images and perform some\r\n\r\n### Delete Cache\r\n\r\n**cache-delete(request, options)**\r\n\r\nThis method finds the item in the cache matching the request, deletes it, and returns a Promise that resolves to `true`. If it doesn''t find the item, it resolves to false. It also has the same optional options parameter available to it as the match method.\r\n\r\n### Delete Item from cache\r\n\r\ndelete an item from cache by calling `delete()` method.\r\n\r\n<pre><code>const cacheName = staticcache\r\ncaches.delete(cacheName).then( => {\r\n    console.log(cache deleted)\r\n});</code></pre>\r\n  \r\n### Retrieve keys\r\n\r\n**cache.keys**\r\n\r\nF inally, we can get a list of cache keys using `cache.keys(request, options)`.\r\n\r\nThis returns a Promise that resolves to an array of cache keys. These will be returned in the same order they were inserted into the cache. Both parameters are optional. If nothing is passed, `cache.keys` returns all of the requests in the cache. If a request is passed, it returns all of the matching requests from the cache. The options are the same as those in the previous methods.\r\n\r\n  \r\n\r\nThe keys method can also be called on the caches entry point to return the keys for the caches themselves. This lets you purge outdated caches in one go.\r\n\r\n  \r\n\r\n### When Should I cache ?\r\n\r\nTo answer when,it is important to understand why you want to cache.There are many pointers that would help.\r\n\r\n  \r\n\r\n1. Do you want to go offline-first,sound like an obvious reason why you are here but don''t hate me\r\n\r\n2. Do you want the whole site offline or just a feature to allow for \"Read later\"\r\n\r\n#### On install -as a dependency.\r\n\r\nFor every new service worker, either its the first time the browser interacts with the script or byte differences exist with the currently installed, you get an install event.\r\n\r\n  \r\n\r\nThis is a perfect opportunity to fetch the resources that make the application shell.This process is atomic and when one file fails the whole process fails.\r\n\r\n<pre><code class=\"javascript\">self.addEventListener(''install'', event => {\r\n    event.waitUntil(\r\n        caches.open(cacheName).then(cache => {\r\n            return cache.addAll(\r\n                [\r\n                    ''/css/bootstrap.css'',\r\n                    ''/css/main.css'',\r\n                    ''/js/bootstrap.min.js'',\r\n                    ''/js/jquery.min.js'',\r\n                ]\r\n            );\r\n        })\r\n    );\r\n});</code></pre>\r\n\r\n**ideal for** the static version of your site such as html, css, images, js,fonts.\r\n\r\n#### on activate\r\nIf the new service worker is installed and the previous service worker is gone,  activate event fired.This means the new service worker is ready to control pages .This is the perfect time to delete unused caches.\r\n\r\nItems do not expire or update and must be explicitly requested.\r\n\r\nA cache object is linked to the current origin(domain).An origin can have multiple cache objects.When deleting old cache, we need to ensure we do not delete   caches from another app that might be running on the same origin.\r\n<pre><code class=\"javascript\">self.addEventListener(''activate'', function(event) {\r\n    event.waitUntil(\r\n        caches.keys().then(function(cacheNames) {\r\n            return Promise.all(\r\n                cacheNames.filter(function(cacheName) {\r\n                    // Return true if you want to remove this cache, \r\n                    // but remember that caches are shared across \r\n                    // the whole origin \r\n                    return cacheName.startsWith(''static-'') &&\r\n                        cacheName != cacheName;\r\n                }).map(function(cacheName) {\r\n                    return caches.delete(cacheName);\r\n                })\r\n            );\r\n        })\r\n    );\r\n});</code></pre>\r\n\r\n\r\n\r\n\r\n\r\n**Ideal for:** Clean-up & migration.\r\n\r\n#### On user interaction.\r\nThere are those situations where the whole site cannot be taken offline.user can select the content they want available offline. For example an article or photo gallery.\r\n\r\nGive the user read later, save for offline.\r\n\r\n#### On Network response\r\nWhen a request is made, check the cache and display the content. If there is no match in the cache, fetch from the network, display content for the user and at the same time update the cache.\r\n\r\n**ideal for** frequently updating resources such as inbox,article content. Also useful for non-essential content such as avatars, but care is needed.\r\n\r\n \r\n>**note** If you do this for a range of urls be careful not to bloat the storage of your origin.If the user needs to reclaim disk space you don''t want to be the prime candidate .make sure you get rid of items in the cache that you don't need any more\r\n\r\n#### state while revalidate\r\nIdeal for frequently updating resources where having the very latest version is non-essential i.e avatars. If there is a cached version use it, BUT fetch and update for next time\r\n\r\n**ideal for** Ideal for frequently updating resources where having the very latest version is non-essential i.e avatars\r\n\r\n#### on Push Message",
    "is_active": true,
    "publish": "2018-09-23T05:12:29Z",
    "created": "2019-03-25T09:12:16.361Z",
    "updated": "2019-03-25T09:12:16.361Z",
    "status": "draft",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": []
  }
},
{
  "model": "blog.post",
  "pk": 15,
  "fields": {
    "title": "Registration in Django with Email Confirmation",
    "slug": "registration-django-email-confirmation",
    "author": 1,
    "image": "blog/2019/04/13/laptop-2557572_1280.jpg",
    "caption": "a girl working on  computer.The desk is candle lit and a cup of coffee on the side",
    "credit": "https://pixabay.com/photos/laptop-mac-computer-browser-2557572/",
    "body": "We all hate the extra step of confirming email when we register on a site don't we? Well, at least I do. Why must I click on some tokens/codes to confirm it's my email? We are about to find out so stay with me. From experience, this is a very important step if you intend to send emails to your clients for whatever reason, don't skip this part.\r\nWe will create users and send them confirmation tokens to make sure they are who they say they are.\r\n### But why is it important to send confirmation tokens to a user? \r\n\r\n+ If you don't verify the existence of an email address, your bounce rate is likely to be high\r\n+ Some malicious individuals will use other people  email address intentionally maybe to get some sensitive information\r\n+ You may end up bothering people who didn't sign up for your services simply because you didn't verify the ownership of the email address\r\n+ The list is endless you kinda get the point right?\r\n\r\nSo Django comes with  powerful inbuilt <a href=\"https://docs.djangoproject.com/en/2.1/topics/auth/default/\"  target=\"_blank\"> authentication system</a> whose  center lies the `User` object.The inbuilt authentication system is  graced with authentication and password management views.No need to break a sweat.\r\nOur scope is creating users and  Django already has  <a href=\"https://achiengcindy.com/permalink/11/\" target=\"_blank\">userCreationform for  creating users</a>. \r\nBut for this tutorial, we go all the way,  create a similar form to register users, create a profile for the user and send a confirmation link to the user's email.Users become active only after confirmation\r\n### Creating accounts app\r\nI assume you are familiar with creating a project in Django.If not check previous tutorial on <a href=\"https://achiengcindy.com/permalink/3/\" target=\"_blank\">django project</a> to get you started.I will dive right away into creating an app called `accounts`  to manage the users using the command <pre><code class=\"python\">python manage.py startapp accounts</code></pre>\r\nActivate accounts app  by adding it to installed-apps<pre><code class=\"python\">INSTALLED_APPS = [\r\n'accounts',\r\n]</code></pre>\r\n### Understanding Django User Object\r\nThe user object comes with username, password, email, first_name and last_name fields\r\nThe username is required and unique, it is used to authenticate the user. The `email field` on the other hand is optional and not unique.\r\n\r\nThis may pose a problem if you want to authenticate using `email address` as common with most apps today. In a future tutorial, we will authenticate users with either the username or email. Therefore, we are about to set the email field to required and unique.\r\n\r\nWe will write a function to check if the email the user inputs exists,  throw an error if a matching email is found or complete registration otherwise.\r\n\r\nin accounts app create a file and call it `forms.py` <pre><code class=\"python\">from django import forms\r\nfrom django.contrib.auth.models import User\r\nclass RegistrationForm(forms.ModelForm):\r\n    email = forms.EmailField(max_length=200, help_text=''Required'')\r\n    password = forms.CharField(label=''Password'', widget=forms.PasswordInput)\r\n    password2 = forms.CharField(label=''Repeat password'', widget=forms.PasswordInput)\r\n    class Meta:\r\n        model = User\r\n        fields = (''username'',''email'',''first_name'',) \r\n    def clean_password2(self):\r\n        cd = self.cleaned_data\r\n        if cd[''password''] != cd[''password2'']:\r\n            raise forms.ValidationError(''Passwords don\\''t match.'')\r\n        return cd[''password2'']\r\n    def clean_email(self):\r\n        email = self.cleaned_data[''email'']\r\n        if User.objects.filter(email=email).exists():\r\n            raise forms.ValidationError(''Please use another Email,that is already taken'')\r\n        return email</code></pre>\r\n\r\nIn a nutshell, before creating the registration form, remember to import the `User` object.\r\nNext, I have defined the email field with a help text indicating that it is required and two other fields for password input.\r\nThe `meta` class describes the fields inherited from the User model and the two functions to validate password and email\r\n\r\n### Registration Views\r\nWe will define the registration logic in views.py.Remember to import the registration form we just created in forms.py`\r\nWe are going to create the `accounts_register` function to handle the registration process.\r\n\r\n<pre><code class=\"python\">from django.shortcuts import render\r\nfrom .forms import RegistrationForm\r\ndef accounts_register(request):\r\n    if request.method == ''POST'':\r\n        registerForm = RegistrationForm(request.POST)\r\n        if registerForm.is_valid():\r\n            user = registerForm.save(commit=False)\r\n            user.email = registerForm.cleaned_data[''email'']\r\n            user.set_password(registerForm.cleaned_data[''password''])\r\n            # Save the User object\r\n            user.save()      \r\n    else:\r\n        registerForm = RegistrationForm()\r\n    return render(request, ''accounts/register.html'',{''form'': registerForm})</code></pre>\r\n \r\n**URLs and templates**\r\n   \r\nWe should create the urls and templates.\r\ncreate a new file `urls.py` in accounts app and include the following\r\n<pre><code class=\"python\">from django.urls import path\r\nfrom . import views\r\nurlpatterns = [\r\npath(''register/'', views.accounts_register, name=''register''),\r\n]</code></pre>\r\nin you `main urls.py` include django authentication views and include accounts views as well.\r\n<pre><code class=\"python\">from django.contrib import admin\r\nfrom django.urls import path ,include\r\nurlpatterns = [\r\npath(''admin/'', admin.site.urls),\r\npath(''accounts/'', include(''django.contrib.auth.urls'')), #django auth views\r\npath(''accounts/'', include(''accounts.urls'')),\r\n]</code></pre>\r\n### Registration Templates\r\nI will create two folders.`Registration` folder for Django inbuilt views.This is the default  place where Django will look for the templates of its  inbuilt views and `accounts` folder for the  register view and \r\n the tokens we will send the users.\r\n\r\nIn accounts app create a folder called templates, then create two subfolders: the registration and accounts folders.\r\nTo have a glimpse of Django views navigate to `http://127.0.0.1:8000/accounts`   you will see all the views it comes with and your only duty is to create their templates in the registration folder which is not our focus today.\r\n\r\nBack to the matter at hand, inside accounts folder create `register.html`\r\n\r\n    <!Doctype  html>\r\n    <html>\r\n    <head>\r\n    <title>Create an account</title>\r\n    </head>\r\n    <body>\r\n    <form  action=\".\"  method=\"post\">{% csrf_token %}\r\n    <p  class=\"hint-text\">Create your account. It''s free and only takes a minute.</p>\r\n    {{ form.as_p }}\r\n    <button  type=\"submit\"  class=\"btn btn-block\">Register Now</button>\r\n    </form>\r\n    </body>\r\n    </html>\r\n\r\nNavigate to `http://127.0.0.1:8000/accounts/register/` and you are likely to get template not found error as shown in the image below:\r\n\r\n![Add Domain](https://i.imgur.com/3pcitxe.png)\r\n\r\nLet''s fix that by telling django where to find our templates.Add the following in settings.py <pre><code class=\"python\">TEMPLATES = [\r\n    {  \r\n        ''DIRS'': [os.path.join(BASE_DIR, ''templates'')],\r\n    },\r\n]</code></pre>\r\nIf we go back to the our browser we should now see  this not so nice registration form.\r\n\r\n![Add Domain](https://imgur.com/yPKZP9D.png)\r\n\r\nYou can now create users\r\n\r\n### Confirm User Registration\r\nIn order to send emails, we must configure our SMTP settings. In settings.py, add the following code replacing the string with actual information.\r\n\r\n<pre><code class=\"python\">EMAIL_HOST=host\r\nEMAIL_HOST_USER=''user\"\r\nEMAIL_HOST_PASSWORD=''password''\r\nEMAIL_PORT=587\r\nEMAIL_USE_TLS=True</code></pre>\r\n\r\n### Token Generation\r\nWe have to create the tokens we will send. Create a new file and call it `tokens.py` inside the accounts app.\r\n\r\nWe will inherit from Django `PasswordResetTokenGenerator` to generate the tokens\r\n\r\n<pre><code class=\"python\">from django.contrib.auth.tokens import PasswordResetTokenGenerator\r\nfrom django.utils import six\r\n\r\nclass AccountActivationTokenGenerator(PasswordResetTokenGenerator):\r\n    def _make_hash_value(self, user, timestamp):\r\n        return (\r\n            six.text_type(user.pk) + six.text_type(timestamp) + six.text_type(user.is_active)\r\n        )\r\naccount_activation_token = AccountActivationTokenGenerator()</code></pre>\r\n\r\n### Sending Tokens \r\nWe have a number of imports to do.Don't forget to import the `account_activation_token` from tokens.py\r\nPaste the following code, it appears long but it is logical.\r\n\r\nTo build on the user registration we have created, we want to send validation tokens.The user becomes active only after confirming the tokens.\r\nAdd the following line before user.save() <pre><code class=\"python\">user.is_active = False</code></pre>\r\n\r\nWe want to send plain text email alongside html. So, define the`message` variable for the plain text and `html_message` for the html content.\r\nThen we use `email_user()` to send the email. The method is available with the `User object`\r\n\r\nEnough said, the accounts_register function should look like this\r\n<pre><code class=\"python\">from django.shortcuts import render , redirect\r\nfrom django.http import HttpResponse\r\nfrom django.contrib.sites.shortcuts import get_current_site\r\nfrom django.utils.encoding import force_bytes, force_text\r\nfrom django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode\r\nfrom django.template.loader import render_to_string\r\nfrom django.conf import settings\r\nfrom django.contrib.auth import login\r\nfrom django.contrib.auth.models import User\r\nfrom .forms import RegistrationForm\r\nfrom .tokens import account_activation_token\r\ndef accounts_register(request):\r\n    if request.method == ''POST'':\r\n        registerForm = RegistrationForm(request.POST)\r\n        if registerForm.is_valid():\r\n            user = registerForm.save(commit=False)\r\n            user.email = registerForm.cleaned_data[''email'']\r\n            user.set_password(registerForm.cleaned_data[''password''])\r\n            user.is_active = False\r\n            # Save the User object\r\n            user.save()\r\n            # get current site\r\n            current_site = get_current_site(request)\r\n            subject = ''Activate your Account''\r\n            # create Message\r\n            message = render_to_string(''accounts/account_activation_email.txt'', {\r\n                'user': user,\r\n                'domain': current_site.domain,\r\n                'uid': urlsafe_base64_encode(force_bytes(user.pk)).decode(\"utf-8\"),\r\n                'token': account_activation_token.make_token(user),\r\n            })\r\n            html_message = render_to_string(''accounts/account_activation_email.html'', {\r\n                'user': user,\r\n                'domain': current_site.domain,\r\n                'uid': urlsafe_base64_encode(force_bytes(user.pk)).decode(\"utf-8\"),\r\n                'token': account_activation_token.make_token(user),\r\n            })\r\n            # send activation link to the user\r\n            user.email_user(subject=subject, message=message, html_message=html_message)\r\n            return HttpResponse('registered succesfully and activation sent')   \r\n    else:\r\n        registerForm = RegistrationForm()\r\n    return render(request, 'accounts/register.html',{'form': registerForm})</code></pre>\r\n\r\n#### Token Generation\r\n\r\n<pre><code class=\"python\">def activate(request, uidb64, token):\r\n    try:\r\n        uid = force_text(urlsafe_base64_decode(uidb64))\r\n        user = User.objects.get(pk=uid)\r\n    except(TypeError, ValueError, OverflowError,User.DoesNotExist):\r\n        user = None\r\n    if user is not None and account_activation_token.check_token(user, token):\r\n        user.is_active = True\r\n        user.save()\r\n        login(request, user)\r\n        return redirect(''login'')\r\n    else:\r\n        return HttpResponse(''invalid token'')</code></pre>\r\n\r\n**URLs and templates**\r\n\r\nin accounts.urls.py add the following view\r\n\r\n     path('activate/<slug:uidb64>/<slug:token>)/', views.activate, name='activate'),\r\n\r\nIn accounts templates.\r\n\r\n**account_activation_invalid.html**\r\n\r\n    {% autoescape off %}\r\n    Hi {{ user.username }},\r\n    Your account has successfully created. Please click below link to activate your account\r\n    http://{{ domain }}{% url ''activate'' uidb64=uid token=token %}\r\n    {% endautoescape %}\r\n\r\n\r\nYou can send tokens in user email after registration.The code  is available on <a href=\"https://github.com/achiengcindy/RegistrationWithConfirmation.git\"  target=\"_blank\">github</a>",
    "is_active": true,
    "publish": "2019-01-17T04:32:24Z",
    "created": "2019-03-25T09:16:16.079Z",
    "updated": "2019-04-13T04:20:17.964Z",
    "status": "published",
    "meta_keywords": "1",
    "meta_description": "",
    "categories": [
      2,
      1
    ]
  }
}
]
